// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ContractorProject is an object representing the database table.
type ContractorProject struct {
	ID        int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    int64       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ProjectID int64       `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	TradeID   int         `boil:"trade_id" json:"trade_id" toml:"trade_id" yaml:"trade_id"`
	Notes     null.String `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`
	IsDeleted null.Bool   `boil:"is_deleted" json:"is_deleted,omitempty" toml:"is_deleted" yaml:"is_deleted,omitempty"`
	Created   null.Time   `boil:"created" json:"created,omitempty" toml:"created" yaml:"created,omitempty"`
	Updated   null.Time   `boil:"updated" json:"updated,omitempty" toml:"updated" yaml:"updated,omitempty"`

	R *contractorProjectR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contractorProjectL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContractorProjectColumns = struct {
	ID        string
	UserID    string
	ProjectID string
	TradeID   string
	Notes     string
	IsDeleted string
	Created   string
	Updated   string
}{
	ID:        "id",
	UserID:    "user_id",
	ProjectID: "project_id",
	TradeID:   "trade_id",
	Notes:     "notes",
	IsDeleted: "is_deleted",
	Created:   "created",
	Updated:   "updated",
}

// Generated where

var ContractorProjectWhere = struct {
	ID        whereHelperint64
	UserID    whereHelperint64
	ProjectID whereHelperint64
	TradeID   whereHelperint
	Notes     whereHelpernull_String
	IsDeleted whereHelpernull_Bool
	Created   whereHelpernull_Time
	Updated   whereHelpernull_Time
}{
	ID:        whereHelperint64{field: "[dbo].[contractor_projects].[id]"},
	UserID:    whereHelperint64{field: "[dbo].[contractor_projects].[user_id]"},
	ProjectID: whereHelperint64{field: "[dbo].[contractor_projects].[project_id]"},
	TradeID:   whereHelperint{field: "[dbo].[contractor_projects].[trade_id]"},
	Notes:     whereHelpernull_String{field: "[dbo].[contractor_projects].[notes]"},
	IsDeleted: whereHelpernull_Bool{field: "[dbo].[contractor_projects].[is_deleted]"},
	Created:   whereHelpernull_Time{field: "[dbo].[contractor_projects].[created]"},
	Updated:   whereHelpernull_Time{field: "[dbo].[contractor_projects].[updated]"},
}

// ContractorProjectRels is where relationship names are stored.
var ContractorProjectRels = struct {
	Project string
	Trade   string
	User    string
}{
	Project: "Project",
	Trade:   "Trade",
	User:    "User",
}

// contractorProjectR is where relationships are stored.
type contractorProjectR struct {
	Project *Project
	Trade   *BasicTradeitem
	User    *Profile
}

// NewStruct creates a new relationship struct
func (*contractorProjectR) NewStruct() *contractorProjectR {
	return &contractorProjectR{}
}

// contractorProjectL is where Load methods for each relationship are stored.
type contractorProjectL struct{}

var (
	contractorProjectAllColumns            = []string{"id", "user_id", "project_id", "trade_id", "notes", "is_deleted", "created", "updated"}
	contractorProjectColumnsWithAuto       = []string{}
	contractorProjectColumnsWithoutDefault = []string{"user_id", "project_id", "trade_id", "notes", "is_deleted", "created", "updated"}
	contractorProjectColumnsWithDefault    = []string{"id"}
	contractorProjectPrimaryKeyColumns     = []string{"id"}
)

type (
	// ContractorProjectSlice is an alias for a slice of pointers to ContractorProject.
	// This should generally be used opposed to []ContractorProject.
	ContractorProjectSlice []*ContractorProject

	contractorProjectQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contractorProjectType                 = reflect.TypeOf(&ContractorProject{})
	contractorProjectMapping              = queries.MakeStructMapping(contractorProjectType)
	contractorProjectPrimaryKeyMapping, _ = queries.BindMapping(contractorProjectType, contractorProjectMapping, contractorProjectPrimaryKeyColumns)
	contractorProjectInsertCacheMut       sync.RWMutex
	contractorProjectInsertCache          = make(map[string]insertCache)
	contractorProjectUpdateCacheMut       sync.RWMutex
	contractorProjectUpdateCache          = make(map[string]updateCache)
	contractorProjectUpsertCacheMut       sync.RWMutex
	contractorProjectUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single contractorProject record from the query.
func (q contractorProjectQuery) One(exec boil.Executor) (*ContractorProject, error) {
	o := &ContractorProject{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for contractor_projects")
	}

	return o, nil
}

// All returns all ContractorProject records from the query.
func (q contractorProjectQuery) All(exec boil.Executor) (ContractorProjectSlice, error) {
	var o []*ContractorProject

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ContractorProject slice")
	}

	return o, nil
}

// Count returns the count of all ContractorProject records in the query.
func (q contractorProjectQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count contractor_projects rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q contractorProjectQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if contractor_projects exists")
	}

	return count > 0, nil
}

// Project pointed to by the foreign key.
func (o *ContractorProject) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[projects]")

	return query
}

// Trade pointed to by the foreign key.
func (o *ContractorProject) Trade(mods ...qm.QueryMod) basicTradeitemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TradeID),
	}

	queryMods = append(queryMods, mods...)

	query := BasicTradeitems(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[basic_tradeitems]")

	return query
}

// User pointed to by the foreign key.
func (o *ContractorProject) User(mods ...qm.QueryMod) profileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Profiles(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[profiles]")

	return query
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contractorProjectL) LoadProject(e boil.Executor, singular bool, maybeContractorProject interface{}, mods queries.Applicator) error {
	var slice []*ContractorProject
	var object *ContractorProject

	if singular {
		object = maybeContractorProject.(*ContractorProject)
	} else {
		slice = *maybeContractorProject.(*[]*ContractorProject)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contractorProjectR{}
		}
		args = append(args, object.ProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contractorProjectR{}
			}

			for _, a := range args {
				if a == obj.ProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.projects`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.ContractorProjects = append(foreign.R.ContractorProjects, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectID == foreign.ID {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.ContractorProjects = append(foreign.R.ContractorProjects, local)
				break
			}
		}
	}

	return nil
}

// LoadTrade allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contractorProjectL) LoadTrade(e boil.Executor, singular bool, maybeContractorProject interface{}, mods queries.Applicator) error {
	var slice []*ContractorProject
	var object *ContractorProject

	if singular {
		object = maybeContractorProject.(*ContractorProject)
	} else {
		slice = *maybeContractorProject.(*[]*ContractorProject)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contractorProjectR{}
		}
		args = append(args, object.TradeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contractorProjectR{}
			}

			for _, a := range args {
				if a == obj.TradeID {
					continue Outer
				}
			}

			args = append(args, obj.TradeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.basic_tradeitems`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BasicTradeitem")
	}

	var resultSlice []*BasicTradeitem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BasicTradeitem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for basic_tradeitems")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for basic_tradeitems")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Trade = foreign
		if foreign.R == nil {
			foreign.R = &basicTradeitemR{}
		}
		foreign.R.TradeContractorProjects = append(foreign.R.TradeContractorProjects, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TradeID == foreign.ID {
				local.R.Trade = foreign
				if foreign.R == nil {
					foreign.R = &basicTradeitemR{}
				}
				foreign.R.TradeContractorProjects = append(foreign.R.TradeContractorProjects, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contractorProjectL) LoadUser(e boil.Executor, singular bool, maybeContractorProject interface{}, mods queries.Applicator) error {
	var slice []*ContractorProject
	var object *ContractorProject

	if singular {
		object = maybeContractorProject.(*ContractorProject)
	} else {
		slice = *maybeContractorProject.(*[]*ContractorProject)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contractorProjectR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contractorProjectR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.profiles`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Profile")
	}

	var resultSlice []*Profile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Profile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for profiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profiles")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &profileR{}
		}
		foreign.R.UserContractorProjects = append(foreign.R.UserContractorProjects, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &profileR{}
				}
				foreign.R.UserContractorProjects = append(foreign.R.UserContractorProjects, local)
				break
			}
		}
	}

	return nil
}

// SetProject of the contractorProject to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.ContractorProjects.
func (o *ContractorProject) SetProject(exec boil.Executor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[contractor_projects] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"project_id"}),
		strmangle.WhereClause("[", "]", 2, contractorProjectPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectID = related.ID
	if o.R == nil {
		o.R = &contractorProjectR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			ContractorProjects: ContractorProjectSlice{o},
		}
	} else {
		related.R.ContractorProjects = append(related.R.ContractorProjects, o)
	}

	return nil
}

// SetTrade of the contractorProject to the related item.
// Sets o.R.Trade to related.
// Adds o to related.R.TradeContractorProjects.
func (o *ContractorProject) SetTrade(exec boil.Executor, insert bool, related *BasicTradeitem) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[contractor_projects] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"trade_id"}),
		strmangle.WhereClause("[", "]", 2, contractorProjectPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TradeID = related.ID
	if o.R == nil {
		o.R = &contractorProjectR{
			Trade: related,
		}
	} else {
		o.R.Trade = related
	}

	if related.R == nil {
		related.R = &basicTradeitemR{
			TradeContractorProjects: ContractorProjectSlice{o},
		}
	} else {
		related.R.TradeContractorProjects = append(related.R.TradeContractorProjects, o)
	}

	return nil
}

// SetUser of the contractorProject to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserContractorProjects.
func (o *ContractorProject) SetUser(exec boil.Executor, insert bool, related *Profile) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[contractor_projects] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"user_id"}),
		strmangle.WhereClause("[", "]", 2, contractorProjectPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &contractorProjectR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &profileR{
			UserContractorProjects: ContractorProjectSlice{o},
		}
	} else {
		related.R.UserContractorProjects = append(related.R.UserContractorProjects, o)
	}

	return nil
}

// ContractorProjects retrieves all the records using an executor.
func ContractorProjects(mods ...qm.QueryMod) contractorProjectQuery {
	mods = append(mods, qm.From("[dbo].[contractor_projects]"))
	return contractorProjectQuery{NewQuery(mods...)}
}

// FindContractorProject retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContractorProject(exec boil.Executor, iD int64, selectCols ...string) (*ContractorProject, error) {
	contractorProjectObj := &ContractorProject{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[contractor_projects] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, contractorProjectObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from contractor_projects")
	}

	return contractorProjectObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ContractorProject) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no contractor_projects provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(contractorProjectColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contractorProjectInsertCacheMut.RLock()
	cache, cached := contractorProjectInsertCache[key]
	contractorProjectInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contractorProjectAllColumns,
			contractorProjectColumnsWithDefault,
			contractorProjectColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contractorProjectType, contractorProjectMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contractorProjectType, contractorProjectMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[contractor_projects] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[contractor_projects] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into contractor_projects")
	}

	if !cached {
		contractorProjectInsertCacheMut.Lock()
		contractorProjectInsertCache[key] = cache
		contractorProjectInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ContractorProject.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ContractorProject) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	contractorProjectUpdateCacheMut.RLock()
	cache, cached := contractorProjectUpdateCache[key]
	contractorProjectUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contractorProjectAllColumns,
			contractorProjectPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, contractorProjectColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update contractor_projects, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[contractor_projects] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, contractorProjectPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contractorProjectType, contractorProjectMapping, append(wl, contractorProjectPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update contractor_projects row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for contractor_projects")
	}

	if !cached {
		contractorProjectUpdateCacheMut.Lock()
		contractorProjectUpdateCache[key] = cache
		contractorProjectUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q contractorProjectQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for contractor_projects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for contractor_projects")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContractorProjectSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contractorProjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[contractor_projects] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, contractorProjectPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in contractorProject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all contractorProject")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ContractorProject) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no contractor_projects provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(contractorProjectColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contractorProjectUpsertCacheMut.RLock()
	cache, cached := contractorProjectUpsertCache[key]
	contractorProjectUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			contractorProjectAllColumns,
			contractorProjectColumnsWithDefault,
			contractorProjectColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, contractorProjectColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(contractorProjectPrimaryKeyColumns, v) && strmangle.ContainsAny(contractorProjectColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert contractor_projects, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, contractorProjectColumnsWithAuto)
		ret = strmangle.SetMerge(ret, contractorProjectColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			contractorProjectAllColumns,
			contractorProjectPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, contractorProjectColumnsWithAuto)

		if len(update) == 0 {
			return errors.New("models: unable to upsert contractor_projects, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "contractor_projects", contractorProjectPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(contractorProjectPrimaryKeyColumns))
		copy(whitelist, contractorProjectPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(contractorProjectType, contractorProjectMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contractorProjectType, contractorProjectMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert contractor_projects")
	}

	if !cached {
		contractorProjectUpsertCacheMut.Lock()
		contractorProjectUpsertCache[key] = cache
		contractorProjectUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ContractorProject record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ContractorProject) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ContractorProject provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contractorProjectPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[contractor_projects] WHERE [id]=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from contractor_projects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for contractor_projects")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q contractorProjectQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no contractorProjectQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from contractor_projects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for contractor_projects")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContractorProjectSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contractorProjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[contractor_projects] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contractorProjectPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from contractorProject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for contractor_projects")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ContractorProject) Reload(exec boil.Executor) error {
	ret, err := FindContractorProject(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContractorProjectSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContractorProjectSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contractorProjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[contractor_projects].* FROM [dbo].[contractor_projects] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contractorProjectPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ContractorProjectSlice")
	}

	*o = slice

	return nil
}

// ContractorProjectExists checks if the ContractorProject row exists.
func ContractorProjectExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[contractor_projects] where [id]=$1) then 1 else 0 end"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if contractor_projects exists")
	}

	return exists, nil
}
