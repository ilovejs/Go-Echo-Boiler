// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Trade is an object representing the database table.
type Trade struct {
	ID              int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	TradeCategoryID int          `boil:"trade_category_id" json:"trade_category_id" toml:"trade_category_id" yaml:"trade_category_id"`
	SurveyorID      int          `boil:"surveyor_id" json:"surveyor_id" toml:"surveyor_id" yaml:"surveyor_id"`
	ProjectID       int          `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	Level           string       `boil:"level" json:"level" toml:"level" yaml:"level"`
	Description     null.String  `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Value           null.Float64 `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`
	Temp            null.Bool    `boil:"temp" json:"temp,omitempty" toml:"temp" yaml:"temp,omitempty"`
	IsActive        bool         `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	IsDeleted       bool         `boil:"is_deleted" json:"is_deleted" toml:"is_deleted" yaml:"is_deleted"`
	Created         null.Time    `boil:"created" json:"created,omitempty" toml:"created" yaml:"created,omitempty"`
	Updated         null.Time    `boil:"updated" json:"updated,omitempty" toml:"updated" yaml:"updated,omitempty"`

	R *tradeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tradeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TradeColumns = struct {
	ID              string
	TradeCategoryID string
	SurveyorID      string
	ProjectID       string
	Level           string
	Description     string
	Value           string
	Temp            string
	IsActive        string
	IsDeleted       string
	Created         string
	Updated         string
}{
	ID:              "id",
	TradeCategoryID: "trade_category_id",
	SurveyorID:      "surveyor_id",
	ProjectID:       "project_id",
	Level:           "level",
	Description:     "description",
	Value:           "value",
	Temp:            "temp",
	IsActive:        "is_active",
	IsDeleted:       "is_deleted",
	Created:         "created",
	Updated:         "updated",
}

// Generated where

var TradeWhere = struct {
	ID              whereHelperint
	TradeCategoryID whereHelperint
	SurveyorID      whereHelperint
	ProjectID       whereHelperint
	Level           whereHelperstring
	Description     whereHelpernull_String
	Value           whereHelpernull_Float64
	Temp            whereHelpernull_Bool
	IsActive        whereHelperbool
	IsDeleted       whereHelperbool
	Created         whereHelpernull_Time
	Updated         whereHelpernull_Time
}{
	ID:              whereHelperint{field: "[dbo].[trades].[id]"},
	TradeCategoryID: whereHelperint{field: "[dbo].[trades].[trade_category_id]"},
	SurveyorID:      whereHelperint{field: "[dbo].[trades].[surveyor_id]"},
	ProjectID:       whereHelperint{field: "[dbo].[trades].[project_id]"},
	Level:           whereHelperstring{field: "[dbo].[trades].[level]"},
	Description:     whereHelpernull_String{field: "[dbo].[trades].[description]"},
	Value:           whereHelpernull_Float64{field: "[dbo].[trades].[value]"},
	Temp:            whereHelpernull_Bool{field: "[dbo].[trades].[temp]"},
	IsActive:        whereHelperbool{field: "[dbo].[trades].[is_active]"},
	IsDeleted:       whereHelperbool{field: "[dbo].[trades].[is_deleted]"},
	Created:         whereHelpernull_Time{field: "[dbo].[trades].[created]"},
	Updated:         whereHelpernull_Time{field: "[dbo].[trades].[updated]"},
}

// TradeRels is where relationship names are stored.
var TradeRels = struct {
	Project        string
	TradeCategory  string
	Surveyor       string
	ClaimHistories string
	Claims         string
}{
	Project:        "Project",
	TradeCategory:  "TradeCategory",
	Surveyor:       "Surveyor",
	ClaimHistories: "ClaimHistories",
	Claims:         "Claims",
}

// tradeR is where relationships are stored.
type tradeR struct {
	Project        *Project
	TradeCategory  *TradeCategory
	Surveyor       *User
	ClaimHistories ClaimHistorySlice
	Claims         ClaimSlice
}

// NewStruct creates a new relationship struct
func (*tradeR) NewStruct() *tradeR {
	return &tradeR{}
}

// tradeL is where Load methods for each relationship are stored.
type tradeL struct{}

var (
	tradeAllColumns            = []string{"id", "trade_category_id", "surveyor_id", "project_id", "level", "description", "value", "temp", "is_active", "is_deleted", "created", "updated"}
	tradeColumnsWithAuto       = []string{}
	tradeColumnsWithoutDefault = []string{"trade_category_id", "surveyor_id", "project_id", "level", "description", "value", "temp", "created"}
	tradeColumnsWithDefault    = []string{"id", "is_active", "is_deleted", "updated"}
	tradePrimaryKeyColumns     = []string{"id"}
)

type (
	// TradeSlice is an alias for a slice of pointers to Trade.
	// This should generally be used opposed to []Trade.
	TradeSlice []*Trade

	tradeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tradeType                 = reflect.TypeOf(&Trade{})
	tradeMapping              = queries.MakeStructMapping(tradeType)
	tradePrimaryKeyMapping, _ = queries.BindMapping(tradeType, tradeMapping, tradePrimaryKeyColumns)
	tradeInsertCacheMut       sync.RWMutex
	tradeInsertCache          = make(map[string]insertCache)
	tradeUpdateCacheMut       sync.RWMutex
	tradeUpdateCache          = make(map[string]updateCache)
	tradeUpsertCacheMut       sync.RWMutex
	tradeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single trade record from the query.
func (q tradeQuery) One(exec boil.Executor) (*Trade, error) {
	o := &Trade{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for trades")
	}

	return o, nil
}

// All returns all Trade records from the query.
func (q tradeQuery) All(exec boil.Executor) (TradeSlice, error) {
	var o []*Trade

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Trade slice")
	}

	return o, nil
}

// Count returns the count of all Trade records in the query.
func (q tradeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count trades rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tradeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if trades exists")
	}

	return count > 0, nil
}

// Project pointed to by the foreign key.
func (o *Trade) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[projects]")

	return query
}

// TradeCategory pointed to by the foreign key.
func (o *Trade) TradeCategory(mods ...qm.QueryMod) tradeCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TradeCategoryID),
	}

	queryMods = append(queryMods, mods...)

	query := TradeCategories(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[trade_categories]")

	return query
}

// Surveyor pointed to by the foreign key.
func (o *Trade) Surveyor(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SurveyorID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[users]")

	return query
}

// ClaimHistories retrieves all the claim_history's ClaimHistories with an executor.
func (o *Trade) ClaimHistories(mods ...qm.QueryMod) claimHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[claim_histories].[trade_id]=?", o.ID),
	)

	query := ClaimHistories(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[claim_histories]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[claim_histories].*"})
	}

	return query
}

// Claims retrieves all the claim's Claims with an executor.
func (o *Trade) Claims(mods ...qm.QueryMod) claimQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[claims].[trade_id]=?", o.ID),
	)

	query := Claims(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[claims]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[claims].*"})
	}

	return query
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tradeL) LoadProject(e boil.Executor, singular bool, maybeTrade interface{}, mods queries.Applicator) error {
	var slice []*Trade
	var object *Trade

	if singular {
		object = maybeTrade.(*Trade)
	} else {
		slice = *maybeTrade.(*[]*Trade)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradeR{}
		}
		args = append(args, object.ProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradeR{}
			}

			for _, a := range args {
				if a == obj.ProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.projects`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.Trades = append(foreign.R.Trades, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectID == foreign.ID {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.Trades = append(foreign.R.Trades, local)
				break
			}
		}
	}

	return nil
}

// LoadTradeCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tradeL) LoadTradeCategory(e boil.Executor, singular bool, maybeTrade interface{}, mods queries.Applicator) error {
	var slice []*Trade
	var object *Trade

	if singular {
		object = maybeTrade.(*Trade)
	} else {
		slice = *maybeTrade.(*[]*Trade)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradeR{}
		}
		args = append(args, object.TradeCategoryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradeR{}
			}

			for _, a := range args {
				if a == obj.TradeCategoryID {
					continue Outer
				}
			}

			args = append(args, obj.TradeCategoryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.trade_categories`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TradeCategory")
	}

	var resultSlice []*TradeCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TradeCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for trade_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trade_categories")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TradeCategory = foreign
		if foreign.R == nil {
			foreign.R = &tradeCategoryR{}
		}
		foreign.R.Trades = append(foreign.R.Trades, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TradeCategoryID == foreign.ID {
				local.R.TradeCategory = foreign
				if foreign.R == nil {
					foreign.R = &tradeCategoryR{}
				}
				foreign.R.Trades = append(foreign.R.Trades, local)
				break
			}
		}
	}

	return nil
}

// LoadSurveyor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tradeL) LoadSurveyor(e boil.Executor, singular bool, maybeTrade interface{}, mods queries.Applicator) error {
	var slice []*Trade
	var object *Trade

	if singular {
		object = maybeTrade.(*Trade)
	} else {
		slice = *maybeTrade.(*[]*Trade)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradeR{}
		}
		args = append(args, object.SurveyorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradeR{}
			}

			for _, a := range args {
				if a == obj.SurveyorID {
					continue Outer
				}
			}

			args = append(args, obj.SurveyorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.users`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Surveyor = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SurveyorTrades = append(foreign.R.SurveyorTrades, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SurveyorID == foreign.ID {
				local.R.Surveyor = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SurveyorTrades = append(foreign.R.SurveyorTrades, local)
				break
			}
		}
	}

	return nil
}

// LoadClaimHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tradeL) LoadClaimHistories(e boil.Executor, singular bool, maybeTrade interface{}, mods queries.Applicator) error {
	var slice []*Trade
	var object *Trade

	if singular {
		object = maybeTrade.(*Trade)
	} else {
		slice = *maybeTrade.(*[]*Trade)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.claim_histories`), qm.WhereIn(`trade_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load claim_histories")
	}

	var resultSlice []*ClaimHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice claim_histories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on claim_histories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for claim_histories")
	}

	if singular {
		object.R.ClaimHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &claimHistoryR{}
			}
			foreign.R.Trade = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TradeID {
				local.R.ClaimHistories = append(local.R.ClaimHistories, foreign)
				if foreign.R == nil {
					foreign.R = &claimHistoryR{}
				}
				foreign.R.Trade = local
				break
			}
		}
	}

	return nil
}

// LoadClaims allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tradeL) LoadClaims(e boil.Executor, singular bool, maybeTrade interface{}, mods queries.Applicator) error {
	var slice []*Trade
	var object *Trade

	if singular {
		object = maybeTrade.(*Trade)
	} else {
		slice = *maybeTrade.(*[]*Trade)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.claims`), qm.WhereIn(`trade_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load claims")
	}

	var resultSlice []*Claim
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice claims")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on claims")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for claims")
	}

	if singular {
		object.R.Claims = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &claimR{}
			}
			foreign.R.Trade = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TradeID {
				local.R.Claims = append(local.R.Claims, foreign)
				if foreign.R == nil {
					foreign.R = &claimR{}
				}
				foreign.R.Trade = local
				break
			}
		}
	}

	return nil
}

// SetProject of the trade to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.Trades.
func (o *Trade) SetProject(exec boil.Executor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[trades] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"project_id"}),
		strmangle.WhereClause("[", "]", 2, tradePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectID = related.ID
	if o.R == nil {
		o.R = &tradeR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			Trades: TradeSlice{o},
		}
	} else {
		related.R.Trades = append(related.R.Trades, o)
	}

	return nil
}

// SetTradeCategory of the trade to the related item.
// Sets o.R.TradeCategory to related.
// Adds o to related.R.Trades.
func (o *Trade) SetTradeCategory(exec boil.Executor, insert bool, related *TradeCategory) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[trades] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"trade_category_id"}),
		strmangle.WhereClause("[", "]", 2, tradePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TradeCategoryID = related.ID
	if o.R == nil {
		o.R = &tradeR{
			TradeCategory: related,
		}
	} else {
		o.R.TradeCategory = related
	}

	if related.R == nil {
		related.R = &tradeCategoryR{
			Trades: TradeSlice{o},
		}
	} else {
		related.R.Trades = append(related.R.Trades, o)
	}

	return nil
}

// SetSurveyor of the trade to the related item.
// Sets o.R.Surveyor to related.
// Adds o to related.R.SurveyorTrades.
func (o *Trade) SetSurveyor(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[trades] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"surveyor_id"}),
		strmangle.WhereClause("[", "]", 2, tradePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SurveyorID = related.ID
	if o.R == nil {
		o.R = &tradeR{
			Surveyor: related,
		}
	} else {
		o.R.Surveyor = related
	}

	if related.R == nil {
		related.R = &userR{
			SurveyorTrades: TradeSlice{o},
		}
	} else {
		related.R.SurveyorTrades = append(related.R.SurveyorTrades, o)
	}

	return nil
}

// AddClaimHistories adds the given related objects to the existing relationships
// of the trade, optionally inserting them as new records.
// Appends related to o.R.ClaimHistories.
// Sets related.R.Trade appropriately.
func (o *Trade) AddClaimHistories(exec boil.Executor, insert bool, related ...*ClaimHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TradeID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[claim_histories] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"trade_id"}),
				strmangle.WhereClause("[", "]", 2, claimHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TradeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tradeR{
			ClaimHistories: related,
		}
	} else {
		o.R.ClaimHistories = append(o.R.ClaimHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &claimHistoryR{
				Trade: o,
			}
		} else {
			rel.R.Trade = o
		}
	}
	return nil
}

// AddClaims adds the given related objects to the existing relationships
// of the trade, optionally inserting them as new records.
// Appends related to o.R.Claims.
// Sets related.R.Trade appropriately.
func (o *Trade) AddClaims(exec boil.Executor, insert bool, related ...*Claim) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TradeID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[claims] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"trade_id"}),
				strmangle.WhereClause("[", "]", 2, claimPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TradeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tradeR{
			Claims: related,
		}
	} else {
		o.R.Claims = append(o.R.Claims, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &claimR{
				Trade: o,
			}
		} else {
			rel.R.Trade = o
		}
	}
	return nil
}

// Trades retrieves all the records using an executor.
func Trades(mods ...qm.QueryMod) tradeQuery {
	mods = append(mods, qm.From("[dbo].[trades]"))
	return tradeQuery{NewQuery(mods...)}
}

// FindTrade retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrade(exec boil.Executor, iD int, selectCols ...string) (*Trade, error) {
	tradeObj := &Trade{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[trades] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, tradeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from trades")
	}

	return tradeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Trade) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trades provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(tradeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tradeInsertCacheMut.RLock()
	cache, cached := tradeInsertCache[key]
	tradeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tradeAllColumns,
			tradeColumnsWithDefault,
			tradeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tradeType, tradeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tradeType, tradeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[trades] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[trades] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into trades")
	}

	if !cached {
		tradeInsertCacheMut.Lock()
		tradeInsertCache[key] = cache
		tradeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Trade.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Trade) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	tradeUpdateCacheMut.RLock()
	cache, cached := tradeUpdateCache[key]
	tradeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tradeAllColumns,
			tradePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, tradeColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update trades, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[trades] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, tradePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tradeType, tradeMapping, append(wl, tradePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update trades row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for trades")
	}

	if !cached {
		tradeUpdateCacheMut.Lock()
		tradeUpdateCache[key] = cache
		tradeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q tradeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for trades")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for trades")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TradeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[trades] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tradePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in trade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all trade")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Trade) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trades provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(tradeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tradeUpsertCacheMut.RLock()
	cache, cached := tradeUpsertCache[key]
	tradeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tradeAllColumns,
			tradeColumnsWithDefault,
			tradeColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, tradeColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(tradePrimaryKeyColumns, v) && strmangle.ContainsAny(tradeColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert trades, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, tradeColumnsWithAuto)
		ret = strmangle.SetMerge(ret, tradeColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			tradeAllColumns,
			tradePrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, tradeColumnsWithAuto)

		if len(update) == 0 {
			return errors.New("models: unable to upsert trades, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "trades", tradePrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(tradePrimaryKeyColumns))
		copy(whitelist, tradePrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(tradeType, tradeMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tradeType, tradeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert trades")
	}

	if !cached {
		tradeUpsertCacheMut.Lock()
		tradeUpsertCache[key] = cache
		tradeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Trade record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Trade) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Trade provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tradePrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[trades] WHERE [id]=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from trades")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for trades")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tradeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tradeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trades")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trades")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TradeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[trades] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tradePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trades")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Trade) Reload(exec boil.Executor) error {
	ret, err := FindTrade(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TradeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TradeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[trades].* FROM [dbo].[trades] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tradePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TradeSlice")
	}

	*o = slice

	return nil
}

// TradeExists checks if the Trade row exists.
func TradeExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[trades] where [id]=$1) then 1 else 0 end"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if trades exists")
	}

	return exists, nil
}
