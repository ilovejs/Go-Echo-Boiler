// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("BasicTradeitems", testBasicTradeitems)
	t.Run("ClaimHistories", testClaimHistories)
	t.Run("Claims", testClaims)
	t.Run("ContractorProjects", testContractorProjects)
	t.Run("Logins", testLogins)
	t.Run("Profiles", testProfiles)
	t.Run("Projects", testProjects)
	t.Run("Roles", testRoles)
	t.Run("TradeItems", testTradeItems)
}

func TestDelete(t *testing.T) {
	t.Run("BasicTradeitems", testBasicTradeitemsDelete)
	t.Run("ClaimHistories", testClaimHistoriesDelete)
	t.Run("Claims", testClaimsDelete)
	t.Run("ContractorProjects", testContractorProjectsDelete)
	t.Run("Logins", testLoginsDelete)
	t.Run("Profiles", testProfilesDelete)
	t.Run("Projects", testProjectsDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("TradeItems", testTradeItemsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("BasicTradeitems", testBasicTradeitemsQueryDeleteAll)
	t.Run("ClaimHistories", testClaimHistoriesQueryDeleteAll)
	t.Run("Claims", testClaimsQueryDeleteAll)
	t.Run("ContractorProjects", testContractorProjectsQueryDeleteAll)
	t.Run("Logins", testLoginsQueryDeleteAll)
	t.Run("Profiles", testProfilesQueryDeleteAll)
	t.Run("Projects", testProjectsQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("TradeItems", testTradeItemsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("BasicTradeitems", testBasicTradeitemsSliceDeleteAll)
	t.Run("ClaimHistories", testClaimHistoriesSliceDeleteAll)
	t.Run("Claims", testClaimsSliceDeleteAll)
	t.Run("ContractorProjects", testContractorProjectsSliceDeleteAll)
	t.Run("Logins", testLoginsSliceDeleteAll)
	t.Run("Profiles", testProfilesSliceDeleteAll)
	t.Run("Projects", testProjectsSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("TradeItems", testTradeItemsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("BasicTradeitems", testBasicTradeitemsExists)
	t.Run("ClaimHistories", testClaimHistoriesExists)
	t.Run("Claims", testClaimsExists)
	t.Run("ContractorProjects", testContractorProjectsExists)
	t.Run("Logins", testLoginsExists)
	t.Run("Profiles", testProfilesExists)
	t.Run("Projects", testProjectsExists)
	t.Run("Roles", testRolesExists)
	t.Run("TradeItems", testTradeItemsExists)
}

func TestFind(t *testing.T) {
	t.Run("BasicTradeitems", testBasicTradeitemsFind)
	t.Run("ClaimHistories", testClaimHistoriesFind)
	t.Run("Claims", testClaimsFind)
	t.Run("ContractorProjects", testContractorProjectsFind)
	t.Run("Logins", testLoginsFind)
	t.Run("Profiles", testProfilesFind)
	t.Run("Projects", testProjectsFind)
	t.Run("Roles", testRolesFind)
	t.Run("TradeItems", testTradeItemsFind)
}

func TestBind(t *testing.T) {
	t.Run("BasicTradeitems", testBasicTradeitemsBind)
	t.Run("ClaimHistories", testClaimHistoriesBind)
	t.Run("Claims", testClaimsBind)
	t.Run("ContractorProjects", testContractorProjectsBind)
	t.Run("Logins", testLoginsBind)
	t.Run("Profiles", testProfilesBind)
	t.Run("Projects", testProjectsBind)
	t.Run("Roles", testRolesBind)
	t.Run("TradeItems", testTradeItemsBind)
}

func TestOne(t *testing.T) {
	t.Run("BasicTradeitems", testBasicTradeitemsOne)
	t.Run("ClaimHistories", testClaimHistoriesOne)
	t.Run("Claims", testClaimsOne)
	t.Run("ContractorProjects", testContractorProjectsOne)
	t.Run("Logins", testLoginsOne)
	t.Run("Profiles", testProfilesOne)
	t.Run("Projects", testProjectsOne)
	t.Run("Roles", testRolesOne)
	t.Run("TradeItems", testTradeItemsOne)
}

func TestAll(t *testing.T) {
	t.Run("BasicTradeitems", testBasicTradeitemsAll)
	t.Run("ClaimHistories", testClaimHistoriesAll)
	t.Run("Claims", testClaimsAll)
	t.Run("ContractorProjects", testContractorProjectsAll)
	t.Run("Logins", testLoginsAll)
	t.Run("Profiles", testProfilesAll)
	t.Run("Projects", testProjectsAll)
	t.Run("Roles", testRolesAll)
	t.Run("TradeItems", testTradeItemsAll)
}

func TestCount(t *testing.T) {
	t.Run("BasicTradeitems", testBasicTradeitemsCount)
	t.Run("ClaimHistories", testClaimHistoriesCount)
	t.Run("Claims", testClaimsCount)
	t.Run("ContractorProjects", testContractorProjectsCount)
	t.Run("Logins", testLoginsCount)
	t.Run("Profiles", testProfilesCount)
	t.Run("Projects", testProjectsCount)
	t.Run("Roles", testRolesCount)
	t.Run("TradeItems", testTradeItemsCount)
}

func TestInsert(t *testing.T) {
	t.Run("BasicTradeitems", testBasicTradeitemsInsert)
	t.Run("BasicTradeitems", testBasicTradeitemsInsertWhitelist)
	t.Run("ClaimHistories", testClaimHistoriesInsert)
	t.Run("ClaimHistories", testClaimHistoriesInsertWhitelist)
	t.Run("Claims", testClaimsInsert)
	t.Run("Claims", testClaimsInsertWhitelist)
	t.Run("ContractorProjects", testContractorProjectsInsert)
	t.Run("ContractorProjects", testContractorProjectsInsertWhitelist)
	t.Run("Logins", testLoginsInsert)
	t.Run("Logins", testLoginsInsertWhitelist)
	t.Run("Profiles", testProfilesInsert)
	t.Run("Profiles", testProfilesInsertWhitelist)
	t.Run("Projects", testProjectsInsert)
	t.Run("Projects", testProjectsInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("TradeItems", testTradeItemsInsert)
	t.Run("TradeItems", testTradeItemsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ClaimHistoryToProfileUsingLogin", testClaimHistoryToOneProfileUsingLogin)
	t.Run("ClaimHistoryToTradeItemUsingTradeItem", testClaimHistoryToOneTradeItemUsingTradeItem)
	t.Run("ClaimHistoryToClaimUsingClaim", testClaimHistoryToOneClaimUsingClaim)
	t.Run("ClaimToTradeItemUsingTradeItem", testClaimToOneTradeItemUsingTradeItem)
	t.Run("ClaimToProfileUsingLogin", testClaimToOneProfileUsingLogin)
	t.Run("ClaimToBasicTradeitemUsingTrade", testClaimToOneBasicTradeitemUsingTrade)
	t.Run("ContractorProjectToProjectUsingProject", testContractorProjectToOneProjectUsingProject)
	t.Run("ContractorProjectToBasicTradeitemUsingTrade", testContractorProjectToOneBasicTradeitemUsingTrade)
	t.Run("ContractorProjectToProfileUsingUser", testContractorProjectToOneProfileUsingUser)
	t.Run("LoginToLoginUsingCreatorLogin", testLoginToOneLoginUsingCreatorLogin)
	t.Run("LoginToRoleUsingUserRole", testLoginToOneRoleUsingUserRole)
	t.Run("ProfileToLoginUsingLogin", testProfileToOneLoginUsingLogin)
	t.Run("ProjectToProfileUsingLogin", testProjectToOneProfileUsingLogin)
	t.Run("ProjectToProfileUsingUser", testProjectToOneProfileUsingUser)
	t.Run("TradeItemToProfileUsingLogin", testTradeItemToOneProfileUsingLogin)
	t.Run("TradeItemToProjectUsingProject", testTradeItemToOneProjectUsingProject)
	t.Run("TradeItemToBasicTradeitemUsingTrade", testTradeItemToOneBasicTradeitemUsingTrade)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("BasicTradeitemToTradeClaims", testBasicTradeitemToManyTradeClaims)
	t.Run("BasicTradeitemToTradeContractorProjects", testBasicTradeitemToManyTradeContractorProjects)
	t.Run("BasicTradeitemToTradeTradeItems", testBasicTradeitemToManyTradeTradeItems)
	t.Run("ClaimToClaimHistories", testClaimToManyClaimHistories)
	t.Run("LoginToCreatorLoginLogins", testLoginToManyCreatorLoginLogins)
	t.Run("LoginToProfiles", testLoginToManyProfiles)
	t.Run("ProfileToLoginClaimHistories", testProfileToManyLoginClaimHistories)
	t.Run("ProfileToLoginClaims", testProfileToManyLoginClaims)
	t.Run("ProfileToUserContractorProjects", testProfileToManyUserContractorProjects)
	t.Run("ProfileToLoginProjects", testProfileToManyLoginProjects)
	t.Run("ProfileToUserProjects", testProfileToManyUserProjects)
	t.Run("ProfileToLoginTradeItems", testProfileToManyLoginTradeItems)
	t.Run("ProjectToContractorProjects", testProjectToManyContractorProjects)
	t.Run("ProjectToTradeItems", testProjectToManyTradeItems)
	t.Run("RoleToUserRoleLogins", testRoleToManyUserRoleLogins)
	t.Run("TradeItemToClaimHistories", testTradeItemToManyClaimHistories)
	t.Run("TradeItemToClaims", testTradeItemToManyClaims)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ClaimHistoryToProfileUsingLoginClaimHistories", testClaimHistoryToOneSetOpProfileUsingLogin)
	t.Run("ClaimHistoryToTradeItemUsingClaimHistories", testClaimHistoryToOneSetOpTradeItemUsingTradeItem)
	t.Run("ClaimHistoryToClaimUsingClaimHistories", testClaimHistoryToOneSetOpClaimUsingClaim)
	t.Run("ClaimToTradeItemUsingClaims", testClaimToOneSetOpTradeItemUsingTradeItem)
	t.Run("ClaimToProfileUsingLoginClaims", testClaimToOneSetOpProfileUsingLogin)
	t.Run("ClaimToBasicTradeitemUsingTradeClaims", testClaimToOneSetOpBasicTradeitemUsingTrade)
	t.Run("ContractorProjectToProjectUsingContractorProjects", testContractorProjectToOneSetOpProjectUsingProject)
	t.Run("ContractorProjectToBasicTradeitemUsingTradeContractorProjects", testContractorProjectToOneSetOpBasicTradeitemUsingTrade)
	t.Run("ContractorProjectToProfileUsingUserContractorProjects", testContractorProjectToOneSetOpProfileUsingUser)
	t.Run("LoginToLoginUsingCreatorLoginLogins", testLoginToOneSetOpLoginUsingCreatorLogin)
	t.Run("LoginToRoleUsingUserRoleLogins", testLoginToOneSetOpRoleUsingUserRole)
	t.Run("ProfileToLoginUsingProfiles", testProfileToOneSetOpLoginUsingLogin)
	t.Run("ProjectToProfileUsingLoginProjects", testProjectToOneSetOpProfileUsingLogin)
	t.Run("ProjectToProfileUsingUserProjects", testProjectToOneSetOpProfileUsingUser)
	t.Run("TradeItemToProfileUsingLoginTradeItems", testTradeItemToOneSetOpProfileUsingLogin)
	t.Run("TradeItemToProjectUsingTradeItems", testTradeItemToOneSetOpProjectUsingProject)
	t.Run("TradeItemToBasicTradeitemUsingTradeTradeItems", testTradeItemToOneSetOpBasicTradeitemUsingTrade)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("LoginToLoginUsingCreatorLoginLogins", testLoginToOneRemoveOpLoginUsingCreatorLogin)
	t.Run("LoginToRoleUsingUserRoleLogins", testLoginToOneRemoveOpRoleUsingUserRole)
	t.Run("ProfileToLoginUsingProfiles", testProfileToOneRemoveOpLoginUsingLogin)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("BasicTradeitemToTradeClaims", testBasicTradeitemToManyAddOpTradeClaims)
	t.Run("BasicTradeitemToTradeContractorProjects", testBasicTradeitemToManyAddOpTradeContractorProjects)
	t.Run("BasicTradeitemToTradeTradeItems", testBasicTradeitemToManyAddOpTradeTradeItems)
	t.Run("ClaimToClaimHistories", testClaimToManyAddOpClaimHistories)
	t.Run("LoginToCreatorLoginLogins", testLoginToManyAddOpCreatorLoginLogins)
	t.Run("LoginToProfiles", testLoginToManyAddOpProfiles)
	t.Run("ProfileToLoginClaimHistories", testProfileToManyAddOpLoginClaimHistories)
	t.Run("ProfileToLoginClaims", testProfileToManyAddOpLoginClaims)
	t.Run("ProfileToUserContractorProjects", testProfileToManyAddOpUserContractorProjects)
	t.Run("ProfileToLoginProjects", testProfileToManyAddOpLoginProjects)
	t.Run("ProfileToUserProjects", testProfileToManyAddOpUserProjects)
	t.Run("ProfileToLoginTradeItems", testProfileToManyAddOpLoginTradeItems)
	t.Run("ProjectToContractorProjects", testProjectToManyAddOpContractorProjects)
	t.Run("ProjectToTradeItems", testProjectToManyAddOpTradeItems)
	t.Run("RoleToUserRoleLogins", testRoleToManyAddOpUserRoleLogins)
	t.Run("TradeItemToClaimHistories", testTradeItemToManyAddOpClaimHistories)
	t.Run("TradeItemToClaims", testTradeItemToManyAddOpClaims)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("LoginToCreatorLoginLogins", testLoginToManySetOpCreatorLoginLogins)
	t.Run("LoginToProfiles", testLoginToManySetOpProfiles)
	t.Run("RoleToUserRoleLogins", testRoleToManySetOpUserRoleLogins)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("LoginToCreatorLoginLogins", testLoginToManyRemoveOpCreatorLoginLogins)
	t.Run("LoginToProfiles", testLoginToManyRemoveOpProfiles)
	t.Run("RoleToUserRoleLogins", testRoleToManyRemoveOpUserRoleLogins)
}

func TestReload(t *testing.T) {
	t.Run("BasicTradeitems", testBasicTradeitemsReload)
	t.Run("ClaimHistories", testClaimHistoriesReload)
	t.Run("Claims", testClaimsReload)
	t.Run("ContractorProjects", testContractorProjectsReload)
	t.Run("Logins", testLoginsReload)
	t.Run("Profiles", testProfilesReload)
	t.Run("Projects", testProjectsReload)
	t.Run("Roles", testRolesReload)
	t.Run("TradeItems", testTradeItemsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("BasicTradeitems", testBasicTradeitemsReloadAll)
	t.Run("ClaimHistories", testClaimHistoriesReloadAll)
	t.Run("Claims", testClaimsReloadAll)
	t.Run("ContractorProjects", testContractorProjectsReloadAll)
	t.Run("Logins", testLoginsReloadAll)
	t.Run("Profiles", testProfilesReloadAll)
	t.Run("Projects", testProjectsReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("TradeItems", testTradeItemsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("BasicTradeitems", testBasicTradeitemsSelect)
	t.Run("ClaimHistories", testClaimHistoriesSelect)
	t.Run("Claims", testClaimsSelect)
	t.Run("ContractorProjects", testContractorProjectsSelect)
	t.Run("Logins", testLoginsSelect)
	t.Run("Profiles", testProfilesSelect)
	t.Run("Projects", testProjectsSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("TradeItems", testTradeItemsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("BasicTradeitems", testBasicTradeitemsUpdate)
	t.Run("ClaimHistories", testClaimHistoriesUpdate)
	t.Run("Claims", testClaimsUpdate)
	t.Run("ContractorProjects", testContractorProjectsUpdate)
	t.Run("Logins", testLoginsUpdate)
	t.Run("Profiles", testProfilesUpdate)
	t.Run("Projects", testProjectsUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("TradeItems", testTradeItemsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("BasicTradeitems", testBasicTradeitemsSliceUpdateAll)
	t.Run("ClaimHistories", testClaimHistoriesSliceUpdateAll)
	t.Run("Claims", testClaimsSliceUpdateAll)
	t.Run("ContractorProjects", testContractorProjectsSliceUpdateAll)
	t.Run("Logins", testLoginsSliceUpdateAll)
	t.Run("Profiles", testProfilesSliceUpdateAll)
	t.Run("Projects", testProjectsSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("TradeItems", testTradeItemsSliceUpdateAll)
}
