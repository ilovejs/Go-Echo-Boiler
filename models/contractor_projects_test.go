// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testContractorProjects(t *testing.T) {
	t.Parallel()

	query := ContractorProjects()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testContractorProjectsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractorProject{}
	if err = randomize.Struct(seed, o, contractorProjectDBTypes, true, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ContractorProjects().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContractorProjectsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractorProject{}
	if err = randomize.Struct(seed, o, contractorProjectDBTypes, true, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ContractorProjects().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ContractorProjects().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContractorProjectsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractorProject{}
	if err = randomize.Struct(seed, o, contractorProjectDBTypes, true, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ContractorProjectSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ContractorProjects().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContractorProjectsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractorProject{}
	if err = randomize.Struct(seed, o, contractorProjectDBTypes, true, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ContractorProjectExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ContractorProject exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ContractorProjectExists to return true, but got false.")
	}
}

func testContractorProjectsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractorProject{}
	if err = randomize.Struct(seed, o, contractorProjectDBTypes, true, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	contractorProjectFound, err := FindContractorProject(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if contractorProjectFound == nil {
		t.Error("want a record, got nil")
	}
}

func testContractorProjectsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractorProject{}
	if err = randomize.Struct(seed, o, contractorProjectDBTypes, true, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ContractorProjects().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testContractorProjectsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractorProject{}
	if err = randomize.Struct(seed, o, contractorProjectDBTypes, true, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ContractorProjects().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testContractorProjectsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contractorProjectOne := &ContractorProject{}
	contractorProjectTwo := &ContractorProject{}
	if err = randomize.Struct(seed, contractorProjectOne, contractorProjectDBTypes, false, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}
	if err = randomize.Struct(seed, contractorProjectTwo, contractorProjectDBTypes, false, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = contractorProjectOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = contractorProjectTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ContractorProjects().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testContractorProjectsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	contractorProjectOne := &ContractorProject{}
	contractorProjectTwo := &ContractorProject{}
	if err = randomize.Struct(seed, contractorProjectOne, contractorProjectDBTypes, false, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}
	if err = randomize.Struct(seed, contractorProjectTwo, contractorProjectDBTypes, false, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = contractorProjectOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = contractorProjectTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContractorProjects().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testContractorProjectsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractorProject{}
	if err = randomize.Struct(seed, o, contractorProjectDBTypes, true, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContractorProjects().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContractorProjectsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractorProject{}
	if err = randomize.Struct(seed, o, contractorProjectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(contractorProjectColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ContractorProjects().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContractorProjectToOneProjectUsingProject(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local ContractorProject
	var foreign Project

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, contractorProjectDBTypes, false, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Project struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProjectID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ContractorProjectSlice{&local}
	if err = local.L.LoadProject(tx, false, (*[]*ContractorProject)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testContractorProjectToOneBasicTradeitemUsingTrade(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local ContractorProject
	var foreign BasicTradeitem

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, contractorProjectDBTypes, false, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, basicTradeitemDBTypes, false, basicTradeitemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BasicTradeitem struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TradeID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Trade().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ContractorProjectSlice{&local}
	if err = local.L.LoadTrade(tx, false, (*[]*ContractorProject)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Trade == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Trade = nil
	if err = local.L.LoadTrade(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Trade == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testContractorProjectToOneProfileUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local ContractorProject
	var foreign Profile

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, contractorProjectDBTypes, false, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, profileDBTypes, false, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ContractorProjectSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*ContractorProject)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testContractorProjectToOneSetOpProjectUsingProject(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ContractorProject
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, contractorProjectDBTypes, false, strmangle.SetComplement(contractorProjectPrimaryKeyColumns, contractorProjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Project{&b, &c} {
		err = a.SetProject(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ContractorProjects[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID, x.ID)
		}
	}
}
func testContractorProjectToOneSetOpBasicTradeitemUsingTrade(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ContractorProject
	var b, c BasicTradeitem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, contractorProjectDBTypes, false, strmangle.SetComplement(contractorProjectPrimaryKeyColumns, contractorProjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, basicTradeitemDBTypes, false, strmangle.SetComplement(basicTradeitemPrimaryKeyColumns, basicTradeitemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, basicTradeitemDBTypes, false, strmangle.SetComplement(basicTradeitemPrimaryKeyColumns, basicTradeitemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*BasicTradeitem{&b, &c} {
		err = a.SetTrade(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Trade != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TradeContractorProjects[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TradeID != x.ID {
			t.Error("foreign key was wrong value", a.TradeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TradeID))
		reflect.Indirect(reflect.ValueOf(&a.TradeID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TradeID != x.ID {
			t.Error("foreign key was wrong value", a.TradeID, x.ID)
		}
	}
}
func testContractorProjectToOneSetOpProfileUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ContractorProject
	var b, c Profile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, contractorProjectDBTypes, false, strmangle.SetComplement(contractorProjectPrimaryKeyColumns, contractorProjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Profile{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserContractorProjects[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testContractorProjectsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractorProject{}
	if err = randomize.Struct(seed, o, contractorProjectDBTypes, true, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testContractorProjectsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractorProject{}
	if err = randomize.Struct(seed, o, contractorProjectDBTypes, true, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ContractorProjectSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testContractorProjectsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractorProject{}
	if err = randomize.Struct(seed, o, contractorProjectDBTypes, true, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ContractorProjects().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	contractorProjectDBTypes = map[string]string{`ID`: `bigint`, `UserID`: `bigint`, `ProjectID`: `bigint`, `TradeID`: `int`, `Notes`: `nvarchar`, `IsDeleted`: `bit`, `Created`: `datetime`, `Updated`: `datetime`}
	_                        = bytes.MinRead
)

func testContractorProjectsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(contractorProjectPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(contractorProjectAllColumns) == len(contractorProjectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ContractorProject{}
	if err = randomize.Struct(seed, o, contractorProjectDBTypes, true, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContractorProjects().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, contractorProjectDBTypes, true, contractorProjectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testContractorProjectsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(contractorProjectAllColumns) == len(contractorProjectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ContractorProject{}
	if err = randomize.Struct(seed, o, contractorProjectDBTypes, true, contractorProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContractorProjects().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, contractorProjectDBTypes, true, contractorProjectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(contractorProjectAllColumns, contractorProjectPrimaryKeyColumns) {
		fields = contractorProjectAllColumns
	} else {
		fields = strmangle.SetComplement(
			contractorProjectAllColumns,
			contractorProjectPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(
			fields,
			contractorProjectColumnsWithAuto,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ContractorProjectSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testContractorProjectsUpsert(t *testing.T) {
	t.Parallel()

	if len(contractorProjectAllColumns) == len(contractorProjectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ContractorProject{}
	if err = randomize.Struct(seed, &o, contractorProjectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ContractorProject: %s", err)
	}

	count, err := ContractorProjects().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, contractorProjectDBTypes, false, contractorProjectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContractorProject struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ContractorProject: %s", err)
	}

	count, err = ContractorProjects().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
