// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Login is an object representing the database table.
type Login struct {
	ID             int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Username       null.String `boil:"username" json:"username,omitempty" toml:"username" yaml:"username,omitempty"`
	Password       null.String `boil:"password" json:"password,omitempty" toml:"password" yaml:"password,omitempty"`
	UserRoleID     null.Int    `boil:"user_role_id" json:"user_role_id,omitempty" toml:"user_role_id" yaml:"user_role_id,omitempty"`
	IsActive       null.Bool   `boil:"is_active" json:"is_active,omitempty" toml:"is_active" yaml:"is_active,omitempty"`
	IsDeleted      null.Bool   `boil:"is_deleted" json:"is_deleted,omitempty" toml:"is_deleted" yaml:"is_deleted,omitempty"`
	DeletionReason null.String `boil:"deletion_reason" json:"deletion_reason,omitempty" toml:"deletion_reason" yaml:"deletion_reason,omitempty"`
	Created        null.Time   `boil:"created" json:"created,omitempty" toml:"created" yaml:"created,omitempty"`
	Updated        null.Time   `boil:"updated" json:"updated,omitempty" toml:"updated" yaml:"updated,omitempty"`
	CreatorLoginID null.Int64  `boil:"creator_login_id" json:"creator_login_id,omitempty" toml:"creator_login_id" yaml:"creator_login_id,omitempty"`

	R *loginR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L loginL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LoginColumns = struct {
	ID             string
	Username       string
	Password       string
	UserRoleID     string
	IsActive       string
	IsDeleted      string
	DeletionReason string
	Created        string
	Updated        string
	CreatorLoginID string
}{
	ID:             "id",
	Username:       "username",
	Password:       "password",
	UserRoleID:     "user_role_id",
	IsActive:       "is_active",
	IsDeleted:      "is_deleted",
	DeletionReason: "deletion_reason",
	Created:        "created",
	Updated:        "updated",
	CreatorLoginID: "creator_login_id",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var LoginWhere = struct {
	ID             whereHelperint64
	Username       whereHelpernull_String
	Password       whereHelpernull_String
	UserRoleID     whereHelpernull_Int
	IsActive       whereHelpernull_Bool
	IsDeleted      whereHelpernull_Bool
	DeletionReason whereHelpernull_String
	Created        whereHelpernull_Time
	Updated        whereHelpernull_Time
	CreatorLoginID whereHelpernull_Int64
}{
	ID:             whereHelperint64{field: "[dbo].[logins].[id]"},
	Username:       whereHelpernull_String{field: "[dbo].[logins].[username]"},
	Password:       whereHelpernull_String{field: "[dbo].[logins].[password]"},
	UserRoleID:     whereHelpernull_Int{field: "[dbo].[logins].[user_role_id]"},
	IsActive:       whereHelpernull_Bool{field: "[dbo].[logins].[is_active]"},
	IsDeleted:      whereHelpernull_Bool{field: "[dbo].[logins].[is_deleted]"},
	DeletionReason: whereHelpernull_String{field: "[dbo].[logins].[deletion_reason]"},
	Created:        whereHelpernull_Time{field: "[dbo].[logins].[created]"},
	Updated:        whereHelpernull_Time{field: "[dbo].[logins].[updated]"},
	CreatorLoginID: whereHelpernull_Int64{field: "[dbo].[logins].[creator_login_id]"},
}

// LoginRels is where relationship names are stored.
var LoginRels = struct {
	CreatorLogin       string
	UserRole           string
	CreatorLoginLogins string
	Profiles           string
}{
	CreatorLogin:       "CreatorLogin",
	UserRole:           "UserRole",
	CreatorLoginLogins: "CreatorLoginLogins",
	Profiles:           "Profiles",
}

// loginR is where relationships are stored.
type loginR struct {
	CreatorLogin       *Login
	UserRole           *Role
	CreatorLoginLogins LoginSlice
	Profiles           ProfileSlice
}

// NewStruct creates a new relationship struct
func (*loginR) NewStruct() *loginR {
	return &loginR{}
}

// loginL is where Load methods for each relationship are stored.
type loginL struct{}

var (
	loginAllColumns            = []string{"id", "username", "password", "user_role_id", "is_active", "is_deleted", "deletion_reason", "created", "updated", "creator_login_id"}
	loginColumnsWithAuto       = []string{}
	loginColumnsWithoutDefault = []string{"username", "password", "user_role_id", "is_active", "is_deleted", "deletion_reason", "created", "updated", "creator_login_id"}
	loginColumnsWithDefault    = []string{"id"}
	loginPrimaryKeyColumns     = []string{"id"}
)

type (
	// LoginSlice is an alias for a slice of pointers to Login.
	// This should generally be used opposed to []Login.
	LoginSlice []*Login

	loginQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	loginType                 = reflect.TypeOf(&Login{})
	loginMapping              = queries.MakeStructMapping(loginType)
	loginPrimaryKeyMapping, _ = queries.BindMapping(loginType, loginMapping, loginPrimaryKeyColumns)
	loginInsertCacheMut       sync.RWMutex
	loginInsertCache          = make(map[string]insertCache)
	loginUpdateCacheMut       sync.RWMutex
	loginUpdateCache          = make(map[string]updateCache)
	loginUpsertCacheMut       sync.RWMutex
	loginUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single login record from the query.
func (q loginQuery) One(exec boil.Executor) (*Login, error) {
	o := &Login{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for logins")
	}

	return o, nil
}

// All returns all Login records from the query.
func (q loginQuery) All(exec boil.Executor) (LoginSlice, error) {
	var o []*Login

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Login slice")
	}

	return o, nil
}

// Count returns the count of all Login records in the query.
func (q loginQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count logins rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q loginQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if logins exists")
	}

	return count > 0, nil
}

// CreatorLogin pointed to by the foreign key.
func (o *Login) CreatorLogin(mods ...qm.QueryMod) loginQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CreatorLoginID),
	}

	queryMods = append(queryMods, mods...)

	query := Logins(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[logins]")

	return query
}

// UserRole pointed to by the foreign key.
func (o *Login) UserRole(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserRoleID),
	}

	queryMods = append(queryMods, mods...)

	query := Roles(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[roles]")

	return query
}

// CreatorLoginLogins retrieves all the login's Logins with an executor via creator_login_id column.
func (o *Login) CreatorLoginLogins(mods ...qm.QueryMod) loginQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[logins].[creator_login_id]=?", o.ID),
	)

	query := Logins(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[logins]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[logins].*"})
	}

	return query
}

// Profiles retrieves all the profile's Profiles with an executor.
func (o *Login) Profiles(mods ...qm.QueryMod) profileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[profiles].[login_id]=?", o.ID),
	)

	query := Profiles(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[profiles]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[profiles].*"})
	}

	return query
}

// LoadCreatorLogin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (loginL) LoadCreatorLogin(e boil.Executor, singular bool, maybeLogin interface{}, mods queries.Applicator) error {
	var slice []*Login
	var object *Login

	if singular {
		object = maybeLogin.(*Login)
	} else {
		slice = *maybeLogin.(*[]*Login)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &loginR{}
		}
		if !queries.IsNil(object.CreatorLoginID) {
			args = append(args, object.CreatorLoginID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &loginR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CreatorLoginID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CreatorLoginID) {
				args = append(args, obj.CreatorLoginID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.logins`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Login")
	}

	var resultSlice []*Login
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Login")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for logins")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for logins")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatorLogin = foreign
		if foreign.R == nil {
			foreign.R = &loginR{}
		}
		foreign.R.CreatorLoginLogins = append(foreign.R.CreatorLoginLogins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatorLoginID, foreign.ID) {
				local.R.CreatorLogin = foreign
				if foreign.R == nil {
					foreign.R = &loginR{}
				}
				foreign.R.CreatorLoginLogins = append(foreign.R.CreatorLoginLogins, local)
				break
			}
		}
	}

	return nil
}

// LoadUserRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (loginL) LoadUserRole(e boil.Executor, singular bool, maybeLogin interface{}, mods queries.Applicator) error {
	var slice []*Login
	var object *Login

	if singular {
		object = maybeLogin.(*Login)
	} else {
		slice = *maybeLogin.(*[]*Login)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &loginR{}
		}
		if !queries.IsNil(object.UserRoleID) {
			args = append(args, object.UserRoleID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &loginR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserRoleID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserRoleID) {
				args = append(args, obj.UserRoleID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.roles`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserRole = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.UserRoleLogins = append(foreign.R.UserRoleLogins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserRoleID, foreign.ID) {
				local.R.UserRole = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.UserRoleLogins = append(foreign.R.UserRoleLogins, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatorLoginLogins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (loginL) LoadCreatorLoginLogins(e boil.Executor, singular bool, maybeLogin interface{}, mods queries.Applicator) error {
	var slice []*Login
	var object *Login

	if singular {
		object = maybeLogin.(*Login)
	} else {
		slice = *maybeLogin.(*[]*Login)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &loginR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &loginR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.logins`), qm.WhereIn(`creator_login_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load logins")
	}

	var resultSlice []*Login
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice logins")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on logins")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for logins")
	}

	if singular {
		object.R.CreatorLoginLogins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &loginR{}
			}
			foreign.R.CreatorLogin = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CreatorLoginID) {
				local.R.CreatorLoginLogins = append(local.R.CreatorLoginLogins, foreign)
				if foreign.R == nil {
					foreign.R = &loginR{}
				}
				foreign.R.CreatorLogin = local
				break
			}
		}
	}

	return nil
}

// LoadProfiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (loginL) LoadProfiles(e boil.Executor, singular bool, maybeLogin interface{}, mods queries.Applicator) error {
	var slice []*Login
	var object *Login

	if singular {
		object = maybeLogin.(*Login)
	} else {
		slice = *maybeLogin.(*[]*Login)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &loginR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &loginR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.profiles`), qm.WhereIn(`login_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load profiles")
	}

	var resultSlice []*Profile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice profiles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on profiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profiles")
	}

	if singular {
		object.R.Profiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &profileR{}
			}
			foreign.R.Login = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.LoginID) {
				local.R.Profiles = append(local.R.Profiles, foreign)
				if foreign.R == nil {
					foreign.R = &profileR{}
				}
				foreign.R.Login = local
				break
			}
		}
	}

	return nil
}

// SetCreatorLogin of the login to the related item.
// Sets o.R.CreatorLogin to related.
// Adds o to related.R.CreatorLoginLogins.
func (o *Login) SetCreatorLogin(exec boil.Executor, insert bool, related *Login) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[logins] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"creator_login_id"}),
		strmangle.WhereClause("[", "]", 2, loginPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatorLoginID, related.ID)
	if o.R == nil {
		o.R = &loginR{
			CreatorLogin: related,
		}
	} else {
		o.R.CreatorLogin = related
	}

	if related.R == nil {
		related.R = &loginR{
			CreatorLoginLogins: LoginSlice{o},
		}
	} else {
		related.R.CreatorLoginLogins = append(related.R.CreatorLoginLogins, o)
	}

	return nil
}

// RemoveCreatorLogin relationship.
// Sets o.R.CreatorLogin to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Login) RemoveCreatorLogin(exec boil.Executor, related *Login) error {
	var err error

	queries.SetScanner(&o.CreatorLoginID, nil)
	if _, err = o.Update(exec, boil.Whitelist("creator_login_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.CreatorLogin = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatorLoginLogins {
		if queries.Equal(o.CreatorLoginID, ri.CreatorLoginID) {
			continue
		}

		ln := len(related.R.CreatorLoginLogins)
		if ln > 1 && i < ln-1 {
			related.R.CreatorLoginLogins[i] = related.R.CreatorLoginLogins[ln-1]
		}
		related.R.CreatorLoginLogins = related.R.CreatorLoginLogins[:ln-1]
		break
	}
	return nil
}

// SetUserRole of the login to the related item.
// Sets o.R.UserRole to related.
// Adds o to related.R.UserRoleLogins.
func (o *Login) SetUserRole(exec boil.Executor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[logins] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"user_role_id"}),
		strmangle.WhereClause("[", "]", 2, loginPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserRoleID, related.ID)
	if o.R == nil {
		o.R = &loginR{
			UserRole: related,
		}
	} else {
		o.R.UserRole = related
	}

	if related.R == nil {
		related.R = &roleR{
			UserRoleLogins: LoginSlice{o},
		}
	} else {
		related.R.UserRoleLogins = append(related.R.UserRoleLogins, o)
	}

	return nil
}

// RemoveUserRole relationship.
// Sets o.R.UserRole to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Login) RemoveUserRole(exec boil.Executor, related *Role) error {
	var err error

	queries.SetScanner(&o.UserRoleID, nil)
	if _, err = o.Update(exec, boil.Whitelist("user_role_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.UserRole = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UserRoleLogins {
		if queries.Equal(o.UserRoleID, ri.UserRoleID) {
			continue
		}

		ln := len(related.R.UserRoleLogins)
		if ln > 1 && i < ln-1 {
			related.R.UserRoleLogins[i] = related.R.UserRoleLogins[ln-1]
		}
		related.R.UserRoleLogins = related.R.UserRoleLogins[:ln-1]
		break
	}
	return nil
}

// AddCreatorLoginLogins adds the given related objects to the existing relationships
// of the login, optionally inserting them as new records.
// Appends related to o.R.CreatorLoginLogins.
// Sets related.R.CreatorLogin appropriately.
func (o *Login) AddCreatorLoginLogins(exec boil.Executor, insert bool, related ...*Login) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CreatorLoginID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[logins] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"creator_login_id"}),
				strmangle.WhereClause("[", "]", 2, loginPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CreatorLoginID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &loginR{
			CreatorLoginLogins: related,
		}
	} else {
		o.R.CreatorLoginLogins = append(o.R.CreatorLoginLogins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &loginR{
				CreatorLogin: o,
			}
		} else {
			rel.R.CreatorLogin = o
		}
	}
	return nil
}

// SetCreatorLoginLogins removes all previously related items of the
// login replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreatorLogin's CreatorLoginLogins accordingly.
// Replaces o.R.CreatorLoginLogins with related.
// Sets related.R.CreatorLogin's CreatorLoginLogins accordingly.
func (o *Login) SetCreatorLoginLogins(exec boil.Executor, insert bool, related ...*Login) error {
	query := "update [dbo].[logins] set [creator_login_id] = null where [creator_login_id] = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CreatorLoginLogins {
			queries.SetScanner(&rel.CreatorLoginID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CreatorLogin = nil
		}

		o.R.CreatorLoginLogins = nil
	}
	return o.AddCreatorLoginLogins(exec, insert, related...)
}

// RemoveCreatorLoginLogins relationships from objects passed in.
// Removes related items from R.CreatorLoginLogins (uses pointer comparison, removal does not keep order)
// Sets related.R.CreatorLogin.
func (o *Login) RemoveCreatorLoginLogins(exec boil.Executor, related ...*Login) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CreatorLoginID, nil)
		if rel.R != nil {
			rel.R.CreatorLogin = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("creator_login_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CreatorLoginLogins {
			if rel != ri {
				continue
			}

			ln := len(o.R.CreatorLoginLogins)
			if ln > 1 && i < ln-1 {
				o.R.CreatorLoginLogins[i] = o.R.CreatorLoginLogins[ln-1]
			}
			o.R.CreatorLoginLogins = o.R.CreatorLoginLogins[:ln-1]
			break
		}
	}

	return nil
}

// AddProfiles adds the given related objects to the existing relationships
// of the login, optionally inserting them as new records.
// Appends related to o.R.Profiles.
// Sets related.R.Login appropriately.
func (o *Login) AddProfiles(exec boil.Executor, insert bool, related ...*Profile) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.LoginID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[profiles] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"login_id"}),
				strmangle.WhereClause("[", "]", 2, profilePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.LoginID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &loginR{
			Profiles: related,
		}
	} else {
		o.R.Profiles = append(o.R.Profiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &profileR{
				Login: o,
			}
		} else {
			rel.R.Login = o
		}
	}
	return nil
}

// SetProfiles removes all previously related items of the
// login replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Login's Profiles accordingly.
// Replaces o.R.Profiles with related.
// Sets related.R.Login's Profiles accordingly.
func (o *Login) SetProfiles(exec boil.Executor, insert bool, related ...*Profile) error {
	query := "update [dbo].[profiles] set [login_id] = null where [login_id] = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Profiles {
			queries.SetScanner(&rel.LoginID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Login = nil
		}

		o.R.Profiles = nil
	}
	return o.AddProfiles(exec, insert, related...)
}

// RemoveProfiles relationships from objects passed in.
// Removes related items from R.Profiles (uses pointer comparison, removal does not keep order)
// Sets related.R.Login.
func (o *Login) RemoveProfiles(exec boil.Executor, related ...*Profile) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.LoginID, nil)
		if rel.R != nil {
			rel.R.Login = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("login_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Profiles {
			if rel != ri {
				continue
			}

			ln := len(o.R.Profiles)
			if ln > 1 && i < ln-1 {
				o.R.Profiles[i] = o.R.Profiles[ln-1]
			}
			o.R.Profiles = o.R.Profiles[:ln-1]
			break
		}
	}

	return nil
}

// Logins retrieves all the records using an executor.
func Logins(mods ...qm.QueryMod) loginQuery {
	mods = append(mods, qm.From("[dbo].[logins]"))
	return loginQuery{NewQuery(mods...)}
}

// FindLogin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLogin(exec boil.Executor, iD int64, selectCols ...string) (*Login, error) {
	loginObj := &Login{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[logins] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, loginObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from logins")
	}

	return loginObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Login) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no logins provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(loginColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	loginInsertCacheMut.RLock()
	cache, cached := loginInsertCache[key]
	loginInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			loginAllColumns,
			loginColumnsWithDefault,
			loginColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(loginType, loginMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(loginType, loginMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[logins] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[logins] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into logins")
	}

	if !cached {
		loginInsertCacheMut.Lock()
		loginInsertCache[key] = cache
		loginInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Login.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Login) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	loginUpdateCacheMut.RLock()
	cache, cached := loginUpdateCache[key]
	loginUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			loginAllColumns,
			loginPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, loginColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update logins, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[logins] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, loginPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(loginType, loginMapping, append(wl, loginPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update logins row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for logins")
	}

	if !cached {
		loginUpdateCacheMut.Lock()
		loginUpdateCache[key] = cache
		loginUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q loginQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for logins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for logins")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LoginSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loginPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[logins] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, loginPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in login slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all login")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Login) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no logins provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(loginColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	loginUpsertCacheMut.RLock()
	cache, cached := loginUpsertCache[key]
	loginUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			loginAllColumns,
			loginColumnsWithDefault,
			loginColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, loginColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(loginPrimaryKeyColumns, v) && strmangle.ContainsAny(loginColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert logins, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, loginColumnsWithAuto)
		ret = strmangle.SetMerge(ret, loginColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			loginAllColumns,
			loginPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, loginColumnsWithAuto)

		if len(update) == 0 {
			return errors.New("models: unable to upsert logins, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "logins", loginPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(loginPrimaryKeyColumns))
		copy(whitelist, loginPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(loginType, loginMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(loginType, loginMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert logins")
	}

	if !cached {
		loginUpsertCacheMut.Lock()
		loginUpsertCache[key] = cache
		loginUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Login record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Login) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Login provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), loginPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[logins] WHERE [id]=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from logins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for logins")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q loginQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no loginQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from logins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for logins")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LoginSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loginPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[logins] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, loginPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from login slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for logins")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Login) Reload(exec boil.Executor) error {
	ret, err := FindLogin(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LoginSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LoginSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loginPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[logins].* FROM [dbo].[logins] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, loginPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LoginSlice")
	}

	*o = slice

	return nil
}

// LoginExists checks if the Login row exists.
func LoginExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[logins] where [id]=$1) then 1 else 0 end"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if logins exists")
	}

	return exists, nil
}
