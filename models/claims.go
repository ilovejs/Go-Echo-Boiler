// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Claim is an object representing the database table.
type Claim struct {
	ID               int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	TradeID          int          `boil:"trade_id" json:"trade_id" toml:"trade_id" yaml:"trade_id"`
	ProfileID        int          `boil:"profile_id" json:"profile_id" toml:"profile_id" yaml:"profile_id"`
	BasicTradeID     int          `boil:"basic_trade_id" json:"basic_trade_id" toml:"basic_trade_id" yaml:"basic_trade_id"`
	TotalAmount      null.Float64 `boil:"total_amount" json:"total_amount,omitempty" toml:"total_amount" yaml:"total_amount,omitempty"`
	ClaimedAmount    null.Float64 `boil:"claimed_amount" json:"claimed_amount,omitempty" toml:"claimed_amount" yaml:"claimed_amount,omitempty"`
	PreviousClaimed  null.Float64 `boil:"previous_claimed" json:"previous_claimed,omitempty" toml:"previous_claimed" yaml:"previous_claimed,omitempty"`
	AmountDue        null.Float64 `boil:"amount_due" json:"amount_due,omitempty" toml:"amount_due" yaml:"amount_due,omitempty"`
	CostToCompleted  null.Float64 `boil:"cost_to_completed" json:"cost_to_completed,omitempty" toml:"cost_to_completed" yaml:"cost_to_completed,omitempty"`
	ClaimNumber      null.String  `boil:"claim_number" json:"claim_number,omitempty" toml:"claim_number" yaml:"claim_number,omitempty"`
	ClaimPeriod      null.String  `boil:"claim_period" json:"claim_period,omitempty" toml:"claim_period" yaml:"claim_period,omitempty"`
	ActionClaim      null.Bool    `boil:"action_claim" json:"action_claim,omitempty" toml:"action_claim" yaml:"action_claim,omitempty"`
	OldClaimedAmount null.Float64 `boil:"old_claimed_amount" json:"old_claimed_amount,omitempty" toml:"old_claimed_amount" yaml:"old_claimed_amount,omitempty"`
	ClaimPercentage  null.Float64 `boil:"claim_percentage" json:"claim_percentage,omitempty" toml:"claim_percentage" yaml:"claim_percentage,omitempty"`
	IsDeleted        null.Bool    `boil:"is_deleted" json:"is_deleted,omitempty" toml:"is_deleted" yaml:"is_deleted,omitempty"`
	Created          null.Time    `boil:"created" json:"created,omitempty" toml:"created" yaml:"created,omitempty"`
	Updated          null.Time    `boil:"updated" json:"updated,omitempty" toml:"updated" yaml:"updated,omitempty"`

	R *claimR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L claimL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClaimColumns = struct {
	ID               string
	TradeID          string
	ProfileID        string
	BasicTradeID     string
	TotalAmount      string
	ClaimedAmount    string
	PreviousClaimed  string
	AmountDue        string
	CostToCompleted  string
	ClaimNumber      string
	ClaimPeriod      string
	ActionClaim      string
	OldClaimedAmount string
	ClaimPercentage  string
	IsDeleted        string
	Created          string
	Updated          string
}{
	ID:               "id",
	TradeID:          "trade_id",
	ProfileID:        "profile_id",
	BasicTradeID:     "basic_trade_id",
	TotalAmount:      "total_amount",
	ClaimedAmount:    "claimed_amount",
	PreviousClaimed:  "previous_claimed",
	AmountDue:        "amount_due",
	CostToCompleted:  "cost_to_completed",
	ClaimNumber:      "claim_number",
	ClaimPeriod:      "claim_period",
	ActionClaim:      "action_claim",
	OldClaimedAmount: "old_claimed_amount",
	ClaimPercentage:  "claim_percentage",
	IsDeleted:        "is_deleted",
	Created:          "created",
	Updated:          "updated",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ClaimWhere = struct {
	ID               whereHelperint
	TradeID          whereHelperint
	ProfileID        whereHelperint
	BasicTradeID     whereHelperint
	TotalAmount      whereHelpernull_Float64
	ClaimedAmount    whereHelpernull_Float64
	PreviousClaimed  whereHelpernull_Float64
	AmountDue        whereHelpernull_Float64
	CostToCompleted  whereHelpernull_Float64
	ClaimNumber      whereHelpernull_String
	ClaimPeriod      whereHelpernull_String
	ActionClaim      whereHelpernull_Bool
	OldClaimedAmount whereHelpernull_Float64
	ClaimPercentage  whereHelpernull_Float64
	IsDeleted        whereHelpernull_Bool
	Created          whereHelpernull_Time
	Updated          whereHelpernull_Time
}{
	ID:               whereHelperint{field: "[dbo].[claims].[id]"},
	TradeID:          whereHelperint{field: "[dbo].[claims].[trade_id]"},
	ProfileID:        whereHelperint{field: "[dbo].[claims].[profile_id]"},
	BasicTradeID:     whereHelperint{field: "[dbo].[claims].[basic_trade_id]"},
	TotalAmount:      whereHelpernull_Float64{field: "[dbo].[claims].[total_amount]"},
	ClaimedAmount:    whereHelpernull_Float64{field: "[dbo].[claims].[claimed_amount]"},
	PreviousClaimed:  whereHelpernull_Float64{field: "[dbo].[claims].[previous_claimed]"},
	AmountDue:        whereHelpernull_Float64{field: "[dbo].[claims].[amount_due]"},
	CostToCompleted:  whereHelpernull_Float64{field: "[dbo].[claims].[cost_to_completed]"},
	ClaimNumber:      whereHelpernull_String{field: "[dbo].[claims].[claim_number]"},
	ClaimPeriod:      whereHelpernull_String{field: "[dbo].[claims].[claim_period]"},
	ActionClaim:      whereHelpernull_Bool{field: "[dbo].[claims].[action_claim]"},
	OldClaimedAmount: whereHelpernull_Float64{field: "[dbo].[claims].[old_claimed_amount]"},
	ClaimPercentage:  whereHelpernull_Float64{field: "[dbo].[claims].[claim_percentage]"},
	IsDeleted:        whereHelpernull_Bool{field: "[dbo].[claims].[is_deleted]"},
	Created:          whereHelpernull_Time{field: "[dbo].[claims].[created]"},
	Updated:          whereHelpernull_Time{field: "[dbo].[claims].[updated]"},
}

// ClaimRels is where relationship names are stored.
var ClaimRels = struct {
	BasicTrade     string
	Profile        string
	Trade          string
	ClaimHistories string
}{
	BasicTrade:     "BasicTrade",
	Profile:        "Profile",
	Trade:          "Trade",
	ClaimHistories: "ClaimHistories",
}

// claimR is where relationships are stored.
type claimR struct {
	BasicTrade     *BasicTrade
	Profile        *Profile
	Trade          *Trade
	ClaimHistories ClaimHistorySlice
}

// NewStruct creates a new relationship struct
func (*claimR) NewStruct() *claimR {
	return &claimR{}
}

// claimL is where Load methods for each relationship are stored.
type claimL struct{}

var (
	claimAllColumns            = []string{"id", "trade_id", "profile_id", "basic_trade_id", "total_amount", "claimed_amount", "previous_claimed", "amount_due", "cost_to_completed", "claim_number", "claim_period", "action_claim", "old_claimed_amount", "claim_percentage", "is_deleted", "created", "updated"}
	claimColumnsWithAuto       = []string{}
	claimColumnsWithoutDefault = []string{"trade_id", "profile_id", "basic_trade_id", "total_amount", "claimed_amount", "previous_claimed", "amount_due", "cost_to_completed", "claim_number", "claim_period", "action_claim", "old_claimed_amount", "claim_percentage", "is_deleted", "created"}
	claimColumnsWithDefault    = []string{"id", "updated"}
	claimPrimaryKeyColumns     = []string{"id"}
)

type (
	// ClaimSlice is an alias for a slice of pointers to Claim.
	// This should generally be used opposed to []Claim.
	ClaimSlice []*Claim

	claimQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	claimType                 = reflect.TypeOf(&Claim{})
	claimMapping              = queries.MakeStructMapping(claimType)
	claimPrimaryKeyMapping, _ = queries.BindMapping(claimType, claimMapping, claimPrimaryKeyColumns)
	claimInsertCacheMut       sync.RWMutex
	claimInsertCache          = make(map[string]insertCache)
	claimUpdateCacheMut       sync.RWMutex
	claimUpdateCache          = make(map[string]updateCache)
	claimUpsertCacheMut       sync.RWMutex
	claimUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single claim record from the query.
func (q claimQuery) One(exec boil.Executor) (*Claim, error) {
	o := &Claim{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for claims")
	}

	return o, nil
}

// All returns all Claim records from the query.
func (q claimQuery) All(exec boil.Executor) (ClaimSlice, error) {
	var o []*Claim

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Claim slice")
	}

	return o, nil
}

// Count returns the count of all Claim records in the query.
func (q claimQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count claims rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q claimQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if claims exists")
	}

	return count > 0, nil
}

// BasicTrade pointed to by the foreign key.
func (o *Claim) BasicTrade(mods ...qm.QueryMod) basicTradeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.BasicTradeID),
	}

	queryMods = append(queryMods, mods...)

	query := BasicTrades(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[basic_trades]")

	return query
}

// Profile pointed to by the foreign key.
func (o *Claim) Profile(mods ...qm.QueryMod) profileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ProfileID),
	}

	queryMods = append(queryMods, mods...)

	query := Profiles(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[profiles]")

	return query
}

// Trade pointed to by the foreign key.
func (o *Claim) Trade(mods ...qm.QueryMod) tradeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TradeID),
	}

	queryMods = append(queryMods, mods...)

	query := Trades(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[trades]")

	return query
}

// ClaimHistories retrieves all the claim_history's ClaimHistories with an executor.
func (o *Claim) ClaimHistories(mods ...qm.QueryMod) claimHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[claim_histories].[claim_id]=?", o.ID),
	)

	query := ClaimHistories(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[claim_histories]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[claim_histories].*"})
	}

	return query
}

// LoadBasicTrade allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (claimL) LoadBasicTrade(e boil.Executor, singular bool, maybeClaim interface{}, mods queries.Applicator) error {
	var slice []*Claim
	var object *Claim

	if singular {
		object = maybeClaim.(*Claim)
	} else {
		slice = *maybeClaim.(*[]*Claim)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &claimR{}
		}
		args = append(args, object.BasicTradeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &claimR{}
			}

			for _, a := range args {
				if a == obj.BasicTradeID {
					continue Outer
				}
			}

			args = append(args, obj.BasicTradeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.basic_trades`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BasicTrade")
	}

	var resultSlice []*BasicTrade
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BasicTrade")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for basic_trades")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for basic_trades")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BasicTrade = foreign
		if foreign.R == nil {
			foreign.R = &basicTradeR{}
		}
		foreign.R.Claims = append(foreign.R.Claims, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BasicTradeID == foreign.ID {
				local.R.BasicTrade = foreign
				if foreign.R == nil {
					foreign.R = &basicTradeR{}
				}
				foreign.R.Claims = append(foreign.R.Claims, local)
				break
			}
		}
	}

	return nil
}

// LoadProfile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (claimL) LoadProfile(e boil.Executor, singular bool, maybeClaim interface{}, mods queries.Applicator) error {
	var slice []*Claim
	var object *Claim

	if singular {
		object = maybeClaim.(*Claim)
	} else {
		slice = *maybeClaim.(*[]*Claim)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &claimR{}
		}
		args = append(args, object.ProfileID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &claimR{}
			}

			for _, a := range args {
				if a == obj.ProfileID {
					continue Outer
				}
			}

			args = append(args, obj.ProfileID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.profiles`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Profile")
	}

	var resultSlice []*Profile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Profile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for profiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profiles")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Profile = foreign
		if foreign.R == nil {
			foreign.R = &profileR{}
		}
		foreign.R.Claims = append(foreign.R.Claims, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProfileID == foreign.ID {
				local.R.Profile = foreign
				if foreign.R == nil {
					foreign.R = &profileR{}
				}
				foreign.R.Claims = append(foreign.R.Claims, local)
				break
			}
		}
	}

	return nil
}

// LoadTrade allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (claimL) LoadTrade(e boil.Executor, singular bool, maybeClaim interface{}, mods queries.Applicator) error {
	var slice []*Claim
	var object *Claim

	if singular {
		object = maybeClaim.(*Claim)
	} else {
		slice = *maybeClaim.(*[]*Claim)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &claimR{}
		}
		args = append(args, object.TradeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &claimR{}
			}

			for _, a := range args {
				if a == obj.TradeID {
					continue Outer
				}
			}

			args = append(args, obj.TradeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.trades`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Trade")
	}

	var resultSlice []*Trade
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Trade")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for trades")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trades")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Trade = foreign
		if foreign.R == nil {
			foreign.R = &tradeR{}
		}
		foreign.R.Claims = append(foreign.R.Claims, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TradeID == foreign.ID {
				local.R.Trade = foreign
				if foreign.R == nil {
					foreign.R = &tradeR{}
				}
				foreign.R.Claims = append(foreign.R.Claims, local)
				break
			}
		}
	}

	return nil
}

// LoadClaimHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (claimL) LoadClaimHistories(e boil.Executor, singular bool, maybeClaim interface{}, mods queries.Applicator) error {
	var slice []*Claim
	var object *Claim

	if singular {
		object = maybeClaim.(*Claim)
	} else {
		slice = *maybeClaim.(*[]*Claim)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &claimR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &claimR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.claim_histories`), qm.WhereIn(`claim_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load claim_histories")
	}

	var resultSlice []*ClaimHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice claim_histories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on claim_histories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for claim_histories")
	}

	if singular {
		object.R.ClaimHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &claimHistoryR{}
			}
			foreign.R.Claim = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ClaimID {
				local.R.ClaimHistories = append(local.R.ClaimHistories, foreign)
				if foreign.R == nil {
					foreign.R = &claimHistoryR{}
				}
				foreign.R.Claim = local
				break
			}
		}
	}

	return nil
}

// SetBasicTrade of the claim to the related item.
// Sets o.R.BasicTrade to related.
// Adds o to related.R.Claims.
func (o *Claim) SetBasicTrade(exec boil.Executor, insert bool, related *BasicTrade) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[claims] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"basic_trade_id"}),
		strmangle.WhereClause("[", "]", 2, claimPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BasicTradeID = related.ID
	if o.R == nil {
		o.R = &claimR{
			BasicTrade: related,
		}
	} else {
		o.R.BasicTrade = related
	}

	if related.R == nil {
		related.R = &basicTradeR{
			Claims: ClaimSlice{o},
		}
	} else {
		related.R.Claims = append(related.R.Claims, o)
	}

	return nil
}

// SetProfile of the claim to the related item.
// Sets o.R.Profile to related.
// Adds o to related.R.Claims.
func (o *Claim) SetProfile(exec boil.Executor, insert bool, related *Profile) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[claims] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"profile_id"}),
		strmangle.WhereClause("[", "]", 2, claimPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProfileID = related.ID
	if o.R == nil {
		o.R = &claimR{
			Profile: related,
		}
	} else {
		o.R.Profile = related
	}

	if related.R == nil {
		related.R = &profileR{
			Claims: ClaimSlice{o},
		}
	} else {
		related.R.Claims = append(related.R.Claims, o)
	}

	return nil
}

// SetTrade of the claim to the related item.
// Sets o.R.Trade to related.
// Adds o to related.R.Claims.
func (o *Claim) SetTrade(exec boil.Executor, insert bool, related *Trade) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[claims] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"trade_id"}),
		strmangle.WhereClause("[", "]", 2, claimPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TradeID = related.ID
	if o.R == nil {
		o.R = &claimR{
			Trade: related,
		}
	} else {
		o.R.Trade = related
	}

	if related.R == nil {
		related.R = &tradeR{
			Claims: ClaimSlice{o},
		}
	} else {
		related.R.Claims = append(related.R.Claims, o)
	}

	return nil
}

// AddClaimHistories adds the given related objects to the existing relationships
// of the claim, optionally inserting them as new records.
// Appends related to o.R.ClaimHistories.
// Sets related.R.Claim appropriately.
func (o *Claim) AddClaimHistories(exec boil.Executor, insert bool, related ...*ClaimHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ClaimID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[claim_histories] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"claim_id"}),
				strmangle.WhereClause("[", "]", 2, claimHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ClaimID = o.ID
		}
	}

	if o.R == nil {
		o.R = &claimR{
			ClaimHistories: related,
		}
	} else {
		o.R.ClaimHistories = append(o.R.ClaimHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &claimHistoryR{
				Claim: o,
			}
		} else {
			rel.R.Claim = o
		}
	}
	return nil
}

// Claims retrieves all the records using an executor.
func Claims(mods ...qm.QueryMod) claimQuery {
	mods = append(mods, qm.From("[dbo].[claims]"))
	return claimQuery{NewQuery(mods...)}
}

// FindClaim retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClaim(exec boil.Executor, iD int, selectCols ...string) (*Claim, error) {
	claimObj := &Claim{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[claims] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, claimObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from claims")
	}

	return claimObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Claim) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no claims provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(claimColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	claimInsertCacheMut.RLock()
	cache, cached := claimInsertCache[key]
	claimInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			claimAllColumns,
			claimColumnsWithDefault,
			claimColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(claimType, claimMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(claimType, claimMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[claims] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[claims] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into claims")
	}

	if !cached {
		claimInsertCacheMut.Lock()
		claimInsertCache[key] = cache
		claimInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Claim.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Claim) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	claimUpdateCacheMut.RLock()
	cache, cached := claimUpdateCache[key]
	claimUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			claimAllColumns,
			claimPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, claimColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update claims, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[claims] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, claimPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(claimType, claimMapping, append(wl, claimPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update claims row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for claims")
	}

	if !cached {
		claimUpdateCacheMut.Lock()
		claimUpdateCache[key] = cache
		claimUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q claimQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for claims")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for claims")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClaimSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[claims] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, claimPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in claim slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all claim")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Claim) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no claims provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(claimColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	claimUpsertCacheMut.RLock()
	cache, cached := claimUpsertCache[key]
	claimUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			claimAllColumns,
			claimColumnsWithDefault,
			claimColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, claimColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(claimPrimaryKeyColumns, v) && strmangle.ContainsAny(claimColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert claims, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, claimColumnsWithAuto)
		ret = strmangle.SetMerge(ret, claimColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			claimAllColumns,
			claimPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, claimColumnsWithAuto)

		if len(update) == 0 {
			return errors.New("models: unable to upsert claims, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "claims", claimPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(claimPrimaryKeyColumns))
		copy(whitelist, claimPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(claimType, claimMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(claimType, claimMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert claims")
	}

	if !cached {
		claimUpsertCacheMut.Lock()
		claimUpsertCache[key] = cache
		claimUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Claim record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Claim) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Claim provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), claimPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[claims] WHERE [id]=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from claims")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for claims")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q claimQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no claimQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from claims")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for claims")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClaimSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[claims] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, claimPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from claim slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for claims")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Claim) Reload(exec boil.Executor) error {
	ret, err := FindClaim(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClaimSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClaimSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[claims].* FROM [dbo].[claims] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, claimPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ClaimSlice")
	}

	*o = slice

	return nil
}

// ClaimExists checks if the Claim row exists.
func ClaimExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[claims] where [id]=$1) then 1 else 0 end"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if claims exists")
	}

	return exists, nil
}
