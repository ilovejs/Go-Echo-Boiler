// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTradeItems(t *testing.T) {
	t.Parallel()

	query := TradeItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTradeItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeItem{}
	if err = randomize.Struct(seed, o, tradeItemDBTypes, true, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TradeItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTradeItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeItem{}
	if err = randomize.Struct(seed, o, tradeItemDBTypes, true, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TradeItems().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TradeItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTradeItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeItem{}
	if err = randomize.Struct(seed, o, tradeItemDBTypes, true, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TradeItemSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TradeItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTradeItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeItem{}
	if err = randomize.Struct(seed, o, tradeItemDBTypes, true, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TradeItemExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TradeItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TradeItemExists to return true, but got false.")
	}
}

func testTradeItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeItem{}
	if err = randomize.Struct(seed, o, tradeItemDBTypes, true, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tradeItemFound, err := FindTradeItem(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if tradeItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTradeItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeItem{}
	if err = randomize.Struct(seed, o, tradeItemDBTypes, true, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TradeItems().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testTradeItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeItem{}
	if err = randomize.Struct(seed, o, tradeItemDBTypes, true, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TradeItems().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTradeItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradeItemOne := &TradeItem{}
	tradeItemTwo := &TradeItem{}
	if err = randomize.Struct(seed, tradeItemOne, tradeItemDBTypes, false, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}
	if err = randomize.Struct(seed, tradeItemTwo, tradeItemDBTypes, false, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = tradeItemOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tradeItemTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TradeItems().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTradeItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tradeItemOne := &TradeItem{}
	tradeItemTwo := &TradeItem{}
	if err = randomize.Struct(seed, tradeItemOne, tradeItemDBTypes, false, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}
	if err = randomize.Struct(seed, tradeItemTwo, tradeItemDBTypes, false, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = tradeItemOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tradeItemTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TradeItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testTradeItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeItem{}
	if err = randomize.Struct(seed, o, tradeItemDBTypes, true, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TradeItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTradeItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeItem{}
	if err = randomize.Struct(seed, o, tradeItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(tradeItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TradeItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTradeItemToManyClaimHistories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TradeItem
	var b, c ClaimHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeItemDBTypes, true, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, claimHistoryDBTypes, false, claimHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, claimHistoryDBTypes, false, claimHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TradeItemID = a.ID
	c.TradeItemID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ClaimHistories().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TradeItemID == b.TradeItemID {
			bFound = true
		}
		if v.TradeItemID == c.TradeItemID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TradeItemSlice{&a}
	if err = a.L.LoadClaimHistories(tx, false, (*[]*TradeItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ClaimHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ClaimHistories = nil
	if err = a.L.LoadClaimHistories(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ClaimHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTradeItemToManyClaims(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TradeItem
	var b, c Claim

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeItemDBTypes, true, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, claimDBTypes, false, claimColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, claimDBTypes, false, claimColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TradeItemID = a.ID
	c.TradeItemID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Claims().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TradeItemID == b.TradeItemID {
			bFound = true
		}
		if v.TradeItemID == c.TradeItemID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TradeItemSlice{&a}
	if err = a.L.LoadClaims(tx, false, (*[]*TradeItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Claims); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Claims = nil
	if err = a.L.LoadClaims(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Claims); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTradeItemToManyAddOpClaimHistories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TradeItem
	var b, c, d, e ClaimHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeItemDBTypes, false, strmangle.SetComplement(tradeItemPrimaryKeyColumns, tradeItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ClaimHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, claimHistoryDBTypes, false, strmangle.SetComplement(claimHistoryPrimaryKeyColumns, claimHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ClaimHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddClaimHistories(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TradeItemID {
			t.Error("foreign key was wrong value", a.ID, first.TradeItemID)
		}
		if a.ID != second.TradeItemID {
			t.Error("foreign key was wrong value", a.ID, second.TradeItemID)
		}

		if first.R.TradeItem != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.TradeItem != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ClaimHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ClaimHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ClaimHistories().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTradeItemToManyAddOpClaims(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TradeItem
	var b, c, d, e Claim

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeItemDBTypes, false, strmangle.SetComplement(tradeItemPrimaryKeyColumns, tradeItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Claim{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, claimDBTypes, false, strmangle.SetComplement(claimPrimaryKeyColumns, claimColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Claim{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddClaims(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TradeItemID {
			t.Error("foreign key was wrong value", a.ID, first.TradeItemID)
		}
		if a.ID != second.TradeItemID {
			t.Error("foreign key was wrong value", a.ID, second.TradeItemID)
		}

		if first.R.TradeItem != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.TradeItem != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Claims[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Claims[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Claims().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTradeItemToOneProfileUsingLogin(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TradeItem
	var foreign Profile

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tradeItemDBTypes, false, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, profileDBTypes, false, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LoginID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Login().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TradeItemSlice{&local}
	if err = local.L.LoadLogin(tx, false, (*[]*TradeItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Login == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Login = nil
	if err = local.L.LoadLogin(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Login == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTradeItemToOneProjectUsingProject(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TradeItem
	var foreign Project

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tradeItemDBTypes, false, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Project struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProjectID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TradeItemSlice{&local}
	if err = local.L.LoadProject(tx, false, (*[]*TradeItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTradeItemToOneBasicTradeitemUsingTrade(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TradeItem
	var foreign BasicTradeitem

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tradeItemDBTypes, false, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, basicTradeitemDBTypes, false, basicTradeitemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BasicTradeitem struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TradeID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Trade().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TradeItemSlice{&local}
	if err = local.L.LoadTrade(tx, false, (*[]*TradeItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Trade == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Trade = nil
	if err = local.L.LoadTrade(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Trade == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTradeItemToOneSetOpProfileUsingLogin(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TradeItem
	var b, c Profile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeItemDBTypes, false, strmangle.SetComplement(tradeItemPrimaryKeyColumns, tradeItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Profile{&b, &c} {
		err = a.SetLogin(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Login != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LoginTradeItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LoginID != x.ID {
			t.Error("foreign key was wrong value", a.LoginID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LoginID))
		reflect.Indirect(reflect.ValueOf(&a.LoginID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LoginID != x.ID {
			t.Error("foreign key was wrong value", a.LoginID, x.ID)
		}
	}
}
func testTradeItemToOneSetOpProjectUsingProject(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TradeItem
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeItemDBTypes, false, strmangle.SetComplement(tradeItemPrimaryKeyColumns, tradeItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Project{&b, &c} {
		err = a.SetProject(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TradeItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID, x.ID)
		}
	}
}
func testTradeItemToOneSetOpBasicTradeitemUsingTrade(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TradeItem
	var b, c BasicTradeitem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeItemDBTypes, false, strmangle.SetComplement(tradeItemPrimaryKeyColumns, tradeItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, basicTradeitemDBTypes, false, strmangle.SetComplement(basicTradeitemPrimaryKeyColumns, basicTradeitemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, basicTradeitemDBTypes, false, strmangle.SetComplement(basicTradeitemPrimaryKeyColumns, basicTradeitemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*BasicTradeitem{&b, &c} {
		err = a.SetTrade(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Trade != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TradeTradeItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TradeID != x.ID {
			t.Error("foreign key was wrong value", a.TradeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TradeID))
		reflect.Indirect(reflect.ValueOf(&a.TradeID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TradeID != x.ID {
			t.Error("foreign key was wrong value", a.TradeID, x.ID)
		}
	}
}

func testTradeItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeItem{}
	if err = randomize.Struct(seed, o, tradeItemDBTypes, true, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTradeItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeItem{}
	if err = randomize.Struct(seed, o, tradeItemDBTypes, true, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TradeItemSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testTradeItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeItem{}
	if err = randomize.Struct(seed, o, tradeItemDBTypes, true, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TradeItems().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tradeItemDBTypes = map[string]string{`ID`: `bigint`, `TradeID`: `int`, `FloorLevel`: `varchar`, `WorkDesc`: `nvarchar`, `ItemBreakdown`: `decimal`, `IsDeleted`: `bit`, `Created`: `datetime`, `Updated`: `datetime`, `LoginID`: `bigint`, `ProjectID`: `bigint`, `Tempcheck`: `bit`}
	_                = bytes.MinRead
)

func testTradeItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tradeItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tradeItemAllColumns) == len(tradeItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TradeItem{}
	if err = randomize.Struct(seed, o, tradeItemDBTypes, true, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TradeItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tradeItemDBTypes, true, tradeItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTradeItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tradeItemAllColumns) == len(tradeItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TradeItem{}
	if err = randomize.Struct(seed, o, tradeItemDBTypes, true, tradeItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TradeItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tradeItemDBTypes, true, tradeItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tradeItemAllColumns, tradeItemPrimaryKeyColumns) {
		fields = tradeItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			tradeItemAllColumns,
			tradeItemPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(
			fields,
			tradeItemColumnsWithAuto,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TradeItemSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTradeItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(tradeItemAllColumns) == len(tradeItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TradeItem{}
	if err = randomize.Struct(seed, &o, tradeItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TradeItem: %s", err)
	}

	count, err := TradeItems().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tradeItemDBTypes, false, tradeItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TradeItem struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TradeItem: %s", err)
	}

	count, err = TradeItems().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
