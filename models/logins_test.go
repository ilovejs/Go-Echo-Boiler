// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLogins(t *testing.T) {
	t.Parallel()

	query := Logins()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLoginsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Login{}
	if err = randomize.Struct(seed, o, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Logins().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLoginsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Login{}
	if err = randomize.Struct(seed, o, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Logins().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Logins().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLoginsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Login{}
	if err = randomize.Struct(seed, o, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LoginSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Logins().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLoginsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Login{}
	if err = randomize.Struct(seed, o, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LoginExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Login exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LoginExists to return true, but got false.")
	}
}

func testLoginsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Login{}
	if err = randomize.Struct(seed, o, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	loginFound, err := FindLogin(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if loginFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLoginsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Login{}
	if err = randomize.Struct(seed, o, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Logins().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testLoginsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Login{}
	if err = randomize.Struct(seed, o, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Logins().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLoginsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	loginOne := &Login{}
	loginTwo := &Login{}
	if err = randomize.Struct(seed, loginOne, loginDBTypes, false, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}
	if err = randomize.Struct(seed, loginTwo, loginDBTypes, false, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = loginOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = loginTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Logins().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLoginsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	loginOne := &Login{}
	loginTwo := &Login{}
	if err = randomize.Struct(seed, loginOne, loginDBTypes, false, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}
	if err = randomize.Struct(seed, loginTwo, loginDBTypes, false, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = loginOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = loginTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Logins().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testLoginsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Login{}
	if err = randomize.Struct(seed, o, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Logins().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLoginsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Login{}
	if err = randomize.Struct(seed, o, loginDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(loginColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Logins().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLoginToManyCreatorLoginLogins(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Login
	var b, c Login

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, loginDBTypes, false, loginColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, loginDBTypes, false, loginColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorLoginID, a.ID)
	queries.Assign(&c.CreatorLoginID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorLoginLogins().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorLoginID, b.CreatorLoginID) {
			bFound = true
		}
		if queries.Equal(v.CreatorLoginID, c.CreatorLoginID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := LoginSlice{&a}
	if err = a.L.LoadCreatorLoginLogins(tx, false, (*[]*Login)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorLoginLogins); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorLoginLogins = nil
	if err = a.L.LoadCreatorLoginLogins(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorLoginLogins); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testLoginToManyProfiles(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Login
	var b, c Profile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, profileDBTypes, false, profileColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, profileDBTypes, false, profileColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.LoginID, a.ID)
	queries.Assign(&c.LoginID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Profiles().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.LoginID, b.LoginID) {
			bFound = true
		}
		if queries.Equal(v.LoginID, c.LoginID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := LoginSlice{&a}
	if err = a.L.LoadProfiles(tx, false, (*[]*Login)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Profiles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Profiles = nil
	if err = a.L.LoadProfiles(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Profiles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testLoginToManyAddOpCreatorLoginLogins(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Login
	var b, c, d, e Login

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, loginDBTypes, false, strmangle.SetComplement(loginPrimaryKeyColumns, loginColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Login{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, loginDBTypes, false, strmangle.SetComplement(loginPrimaryKeyColumns, loginColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Login{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorLoginLogins(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorLoginID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorLoginID)
		}
		if !queries.Equal(a.ID, second.CreatorLoginID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorLoginID)
		}

		if first.R.CreatorLogin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CreatorLogin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorLoginLogins[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorLoginLogins[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorLoginLogins().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testLoginToManySetOpCreatorLoginLogins(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Login
	var b, c, d, e Login

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, loginDBTypes, false, strmangle.SetComplement(loginPrimaryKeyColumns, loginColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Login{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, loginDBTypes, false, strmangle.SetComplement(loginPrimaryKeyColumns, loginColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorLoginLogins(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorLoginLogins().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorLoginLogins(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorLoginLogins().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorLoginID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorLoginID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorLoginID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorLoginID)
	}
	if !queries.Equal(a.ID, e.CreatorLoginID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorLoginID)
	}

	if b.R.CreatorLogin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CreatorLogin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CreatorLogin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CreatorLogin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorLoginLogins[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorLoginLogins[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testLoginToManyRemoveOpCreatorLoginLogins(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Login
	var b, c, d, e Login

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, loginDBTypes, false, strmangle.SetComplement(loginPrimaryKeyColumns, loginColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Login{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, loginDBTypes, false, strmangle.SetComplement(loginPrimaryKeyColumns, loginColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorLoginLogins(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorLoginLogins().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorLoginLogins(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorLoginLogins().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorLoginID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorLoginID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CreatorLogin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CreatorLogin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CreatorLogin != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CreatorLogin != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorLoginLogins) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorLoginLogins[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorLoginLogins[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testLoginToManyAddOpProfiles(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Login
	var b, c, d, e Profile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, loginDBTypes, false, strmangle.SetComplement(loginPrimaryKeyColumns, loginColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Profile{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Profile{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProfiles(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.LoginID) {
			t.Error("foreign key was wrong value", a.ID, first.LoginID)
		}
		if !queries.Equal(a.ID, second.LoginID) {
			t.Error("foreign key was wrong value", a.ID, second.LoginID)
		}

		if first.R.Login != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Login != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Profiles[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Profiles[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Profiles().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testLoginToManySetOpProfiles(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Login
	var b, c, d, e Profile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, loginDBTypes, false, strmangle.SetComplement(loginPrimaryKeyColumns, loginColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Profile{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProfiles(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Profiles().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProfiles(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Profiles().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.LoginID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.LoginID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.LoginID) {
		t.Error("foreign key was wrong value", a.ID, d.LoginID)
	}
	if !queries.Equal(a.ID, e.LoginID) {
		t.Error("foreign key was wrong value", a.ID, e.LoginID)
	}

	if b.R.Login != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Login != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Login != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Login != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Profiles[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Profiles[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testLoginToManyRemoveOpProfiles(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Login
	var b, c, d, e Profile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, loginDBTypes, false, strmangle.SetComplement(loginPrimaryKeyColumns, loginColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Profile{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProfiles(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Profiles().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProfiles(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Profiles().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.LoginID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.LoginID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Login != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Login != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Login != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Login != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Profiles) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Profiles[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Profiles[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testLoginToOneLoginUsingCreatorLogin(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Login
	var foreign Login

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, loginDBTypes, false, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CreatorLoginID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CreatorLogin().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LoginSlice{&local}
	if err = local.L.LoadCreatorLogin(tx, false, (*[]*Login)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatorLogin == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CreatorLogin = nil
	if err = local.L.LoadCreatorLogin(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatorLogin == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLoginToOneRoleUsingUserRole(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Login
	var foreign Role

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleDBTypes, false, roleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Role struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserRoleID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserRole().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LoginSlice{&local}
	if err = local.L.LoadUserRole(tx, false, (*[]*Login)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserRole == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserRole = nil
	if err = local.L.LoadUserRole(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserRole == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLoginToOneSetOpLoginUsingCreatorLogin(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Login
	var b, c Login

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, loginDBTypes, false, strmangle.SetComplement(loginPrimaryKeyColumns, loginColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, loginDBTypes, false, strmangle.SetComplement(loginPrimaryKeyColumns, loginColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, loginDBTypes, false, strmangle.SetComplement(loginPrimaryKeyColumns, loginColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Login{&b, &c} {
		err = a.SetCreatorLogin(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CreatorLogin != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatorLoginLogins[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CreatorLoginID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorLoginID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatorLoginID))
		reflect.Indirect(reflect.ValueOf(&a.CreatorLoginID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CreatorLoginID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorLoginID, x.ID)
		}
	}
}

func testLoginToOneRemoveOpLoginUsingCreatorLogin(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Login
	var b Login

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, loginDBTypes, false, strmangle.SetComplement(loginPrimaryKeyColumns, loginColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, loginDBTypes, false, strmangle.SetComplement(loginPrimaryKeyColumns, loginColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCreatorLogin(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCreatorLogin(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CreatorLogin().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.CreatorLogin != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CreatorLoginID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CreatorLoginLogins) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testLoginToOneSetOpRoleUsingUserRole(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Login
	var b, c Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, loginDBTypes, false, strmangle.SetComplement(loginPrimaryKeyColumns, loginColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Role{&b, &c} {
		err = a.SetUserRole(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserRole != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserRoleLogins[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserRoleID, x.ID) {
			t.Error("foreign key was wrong value", a.UserRoleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserRoleID))
		reflect.Indirect(reflect.ValueOf(&a.UserRoleID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserRoleID, x.ID) {
			t.Error("foreign key was wrong value", a.UserRoleID, x.ID)
		}
	}
}

func testLoginToOneRemoveOpRoleUsingUserRole(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Login
	var b Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, loginDBTypes, false, strmangle.SetComplement(loginPrimaryKeyColumns, loginColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUserRole(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUserRole(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.UserRole().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.UserRole != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserRoleID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UserRoleLogins) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testLoginsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Login{}
	if err = randomize.Struct(seed, o, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testLoginsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Login{}
	if err = randomize.Struct(seed, o, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LoginSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testLoginsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Login{}
	if err = randomize.Struct(seed, o, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Logins().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	loginDBTypes = map[string]string{`ID`: `bigint`, `Username`: `nvarchar`, `Password`: `nvarchar`, `UserRoleID`: `int`, `IsActive`: `bit`, `IsDeleted`: `bit`, `DeletionReason`: `nvarchar`, `Created`: `datetime`, `Updated`: `datetime`, `CreatorLoginID`: `bigint`}
	_            = bytes.MinRead
)

func testLoginsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(loginPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(loginAllColumns) == len(loginPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Login{}
	if err = randomize.Struct(seed, o, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Logins().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, loginDBTypes, true, loginPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLoginsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(loginAllColumns) == len(loginPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Login{}
	if err = randomize.Struct(seed, o, loginDBTypes, true, loginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Logins().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, loginDBTypes, true, loginPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(loginAllColumns, loginPrimaryKeyColumns) {
		fields = loginAllColumns
	} else {
		fields = strmangle.SetComplement(
			loginAllColumns,
			loginPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(
			fields,
			loginColumnsWithAuto,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LoginSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLoginsUpsert(t *testing.T) {
	t.Parallel()

	if len(loginAllColumns) == len(loginPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Login{}
	if err = randomize.Struct(seed, &o, loginDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Login: %s", err)
	}

	count, err := Logins().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, loginDBTypes, false, loginPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Login struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Login: %s", err)
	}

	count, err = Logins().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
