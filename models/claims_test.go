// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testClaims(t *testing.T) {
	t.Parallel()

	query := Claims()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testClaimsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Claim{}
	if err = randomize.Struct(seed, o, claimDBTypes, true, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Claims().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClaimsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Claim{}
	if err = randomize.Struct(seed, o, claimDBTypes, true, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Claims().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Claims().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClaimsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Claim{}
	if err = randomize.Struct(seed, o, claimDBTypes, true, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ClaimSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Claims().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClaimsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Claim{}
	if err = randomize.Struct(seed, o, claimDBTypes, true, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ClaimExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Claim exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ClaimExists to return true, but got false.")
	}
}

func testClaimsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Claim{}
	if err = randomize.Struct(seed, o, claimDBTypes, true, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	claimFound, err := FindClaim(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if claimFound == nil {
		t.Error("want a record, got nil")
	}
}

func testClaimsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Claim{}
	if err = randomize.Struct(seed, o, claimDBTypes, true, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Claims().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testClaimsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Claim{}
	if err = randomize.Struct(seed, o, claimDBTypes, true, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Claims().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testClaimsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	claimOne := &Claim{}
	claimTwo := &Claim{}
	if err = randomize.Struct(seed, claimOne, claimDBTypes, false, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}
	if err = randomize.Struct(seed, claimTwo, claimDBTypes, false, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = claimOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = claimTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Claims().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testClaimsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	claimOne := &Claim{}
	claimTwo := &Claim{}
	if err = randomize.Struct(seed, claimOne, claimDBTypes, false, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}
	if err = randomize.Struct(seed, claimTwo, claimDBTypes, false, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = claimOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = claimTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Claims().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testClaimsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Claim{}
	if err = randomize.Struct(seed, o, claimDBTypes, true, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Claims().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testClaimsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Claim{}
	if err = randomize.Struct(seed, o, claimDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(claimColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Claims().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testClaimToManyClaimHistories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Claim
	var b, c ClaimHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, claimDBTypes, true, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, claimHistoryDBTypes, false, claimHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, claimHistoryDBTypes, false, claimHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ClaimID = a.ID
	c.ClaimID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ClaimHistories().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ClaimID == b.ClaimID {
			bFound = true
		}
		if v.ClaimID == c.ClaimID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ClaimSlice{&a}
	if err = a.L.LoadClaimHistories(tx, false, (*[]*Claim)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ClaimHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ClaimHistories = nil
	if err = a.L.LoadClaimHistories(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ClaimHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testClaimToManyAddOpClaimHistories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Claim
	var b, c, d, e ClaimHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, claimDBTypes, false, strmangle.SetComplement(claimPrimaryKeyColumns, claimColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ClaimHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, claimHistoryDBTypes, false, strmangle.SetComplement(claimHistoryPrimaryKeyColumns, claimHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ClaimHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddClaimHistories(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ClaimID {
			t.Error("foreign key was wrong value", a.ID, first.ClaimID)
		}
		if a.ID != second.ClaimID {
			t.Error("foreign key was wrong value", a.ID, second.ClaimID)
		}

		if first.R.Claim != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Claim != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ClaimHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ClaimHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ClaimHistories().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testClaimToOneTradeCategoryUsingTradeCategory(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Claim
	var foreign TradeCategory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, claimDBTypes, false, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tradeCategoryDBTypes, false, tradeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeCategory struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TradeCategoryID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.TradeCategory().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ClaimSlice{&local}
	if err = local.L.LoadTradeCategory(tx, false, (*[]*Claim)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TradeCategory == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.TradeCategory = nil
	if err = local.L.LoadTradeCategory(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TradeCategory == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testClaimToOneTradeUsingTrade(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Claim
	var foreign Trade

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, claimDBTypes, false, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tradeDBTypes, false, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TradeID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Trade().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ClaimSlice{&local}
	if err = local.L.LoadTrade(tx, false, (*[]*Claim)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Trade == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Trade = nil
	if err = local.L.LoadTrade(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Trade == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testClaimToOneUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Claim
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, claimDBTypes, false, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ClaimSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*Claim)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testClaimToOneSetOpTradeCategoryUsingTradeCategory(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Claim
	var b, c TradeCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, claimDBTypes, false, strmangle.SetComplement(claimPrimaryKeyColumns, claimColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tradeCategoryDBTypes, false, strmangle.SetComplement(tradeCategoryPrimaryKeyColumns, tradeCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tradeCategoryDBTypes, false, strmangle.SetComplement(tradeCategoryPrimaryKeyColumns, tradeCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*TradeCategory{&b, &c} {
		err = a.SetTradeCategory(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.TradeCategory != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Claims[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TradeCategoryID != x.ID {
			t.Error("foreign key was wrong value", a.TradeCategoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TradeCategoryID))
		reflect.Indirect(reflect.ValueOf(&a.TradeCategoryID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TradeCategoryID != x.ID {
			t.Error("foreign key was wrong value", a.TradeCategoryID, x.ID)
		}
	}
}
func testClaimToOneSetOpTradeUsingTrade(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Claim
	var b, c Trade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, claimDBTypes, false, strmangle.SetComplement(claimPrimaryKeyColumns, claimColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Trade{&b, &c} {
		err = a.SetTrade(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Trade != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Claims[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TradeID != x.ID {
			t.Error("foreign key was wrong value", a.TradeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TradeID))
		reflect.Indirect(reflect.ValueOf(&a.TradeID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TradeID != x.ID {
			t.Error("foreign key was wrong value", a.TradeID, x.ID)
		}
	}
}
func testClaimToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Claim
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, claimDBTypes, false, strmangle.SetComplement(claimPrimaryKeyColumns, claimColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Claims[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testClaimsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Claim{}
	if err = randomize.Struct(seed, o, claimDBTypes, true, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testClaimsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Claim{}
	if err = randomize.Struct(seed, o, claimDBTypes, true, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ClaimSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testClaimsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Claim{}
	if err = randomize.Struct(seed, o, claimDBTypes, true, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Claims().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	claimDBTypes = map[string]string{`ID`: `int`, `TradeID`: `int`, `UserID`: `int`, `TradeCategoryID`: `int`, `TotalAmount`: `float`, `ClaimedAmount`: `float`, `PreviousClaimed`: `float`, `AmountDue`: `float`, `CostToCompleted`: `float`, `ClaimNo`: `varchar`, `ClaimPeriod`: `varchar`, `ActionClaim`: `bit`, `OldClaimedAmount`: `float`, `ClaimPercentage`: `float`, `IsActive`: `bit`, `IsDeleted`: `bit`, `Created`: `datetime`, `Updated`: `datetime`}
	_            = bytes.MinRead
)

func testClaimsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(claimPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(claimAllColumns) == len(claimPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Claim{}
	if err = randomize.Struct(seed, o, claimDBTypes, true, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Claims().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, claimDBTypes, true, claimPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testClaimsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(claimAllColumns) == len(claimPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Claim{}
	if err = randomize.Struct(seed, o, claimDBTypes, true, claimColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Claims().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, claimDBTypes, true, claimPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(claimAllColumns, claimPrimaryKeyColumns) {
		fields = claimAllColumns
	} else {
		fields = strmangle.SetComplement(
			claimAllColumns,
			claimPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(
			fields,
			claimColumnsWithAuto,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ClaimSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testClaimsUpsert(t *testing.T) {
	t.Parallel()

	if len(claimAllColumns) == len(claimPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Claim{}
	if err = randomize.Struct(seed, &o, claimDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Claim: %s", err)
	}

	count, err := Claims().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, claimDBTypes, false, claimPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Claim struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Claim: %s", err)
	}

	count, err = Claims().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
