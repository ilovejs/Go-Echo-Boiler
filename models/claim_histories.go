// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ClaimHistory is an object representing the database table.
type ClaimHistory struct {
	ID              int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	TradeID         int          `boil:"trade_id" json:"trade_id" toml:"trade_id" yaml:"trade_id"`
	ClaimID         int          `boil:"claim_id" json:"claim_id" toml:"claim_id" yaml:"claim_id"`
	ProfileID       int          `boil:"profile_id" json:"profile_id" toml:"profile_id" yaml:"profile_id"`
	PreviousClaimed null.Float64 `boil:"previous_claimed" json:"previous_claimed,omitempty" toml:"previous_claimed" yaml:"previous_claimed,omitempty"`
	Created         null.Time    `boil:"created" json:"created,omitempty" toml:"created" yaml:"created,omitempty"`
	Updated         null.Time    `boil:"updated" json:"updated,omitempty" toml:"updated" yaml:"updated,omitempty"`

	R *claimHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L claimHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClaimHistoryColumns = struct {
	ID              string
	TradeID         string
	ClaimID         string
	ProfileID       string
	PreviousClaimed string
	Created         string
	Updated         string
}{
	ID:              "id",
	TradeID:         "trade_id",
	ClaimID:         "claim_id",
	ProfileID:       "profile_id",
	PreviousClaimed: "previous_claimed",
	Created:         "created",
	Updated:         "updated",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ClaimHistoryWhere = struct {
	ID              whereHelperint
	TradeID         whereHelperint
	ClaimID         whereHelperint
	ProfileID       whereHelperint
	PreviousClaimed whereHelpernull_Float64
	Created         whereHelpernull_Time
	Updated         whereHelpernull_Time
}{
	ID:              whereHelperint{field: "[dbo].[claim_histories].[id]"},
	TradeID:         whereHelperint{field: "[dbo].[claim_histories].[trade_id]"},
	ClaimID:         whereHelperint{field: "[dbo].[claim_histories].[claim_id]"},
	ProfileID:       whereHelperint{field: "[dbo].[claim_histories].[profile_id]"},
	PreviousClaimed: whereHelpernull_Float64{field: "[dbo].[claim_histories].[previous_claimed]"},
	Created:         whereHelpernull_Time{field: "[dbo].[claim_histories].[created]"},
	Updated:         whereHelpernull_Time{field: "[dbo].[claim_histories].[updated]"},
}

// ClaimHistoryRels is where relationship names are stored.
var ClaimHistoryRels = struct {
	Claim   string
	Profile string
	Trade   string
}{
	Claim:   "Claim",
	Profile: "Profile",
	Trade:   "Trade",
}

// claimHistoryR is where relationships are stored.
type claimHistoryR struct {
	Claim   *Claim
	Profile *Profile
	Trade   *Trade
}

// NewStruct creates a new relationship struct
func (*claimHistoryR) NewStruct() *claimHistoryR {
	return &claimHistoryR{}
}

// claimHistoryL is where Load methods for each relationship are stored.
type claimHistoryL struct{}

var (
	claimHistoryAllColumns            = []string{"id", "trade_id", "claim_id", "profile_id", "previous_claimed", "created", "updated"}
	claimHistoryColumnsWithAuto       = []string{}
	claimHistoryColumnsWithoutDefault = []string{"trade_id", "claim_id", "profile_id", "previous_claimed", "created"}
	claimHistoryColumnsWithDefault    = []string{"id", "updated"}
	claimHistoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// ClaimHistorySlice is an alias for a slice of pointers to ClaimHistory.
	// This should generally be used opposed to []ClaimHistory.
	ClaimHistorySlice []*ClaimHistory

	claimHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	claimHistoryType                 = reflect.TypeOf(&ClaimHistory{})
	claimHistoryMapping              = queries.MakeStructMapping(claimHistoryType)
	claimHistoryPrimaryKeyMapping, _ = queries.BindMapping(claimHistoryType, claimHistoryMapping, claimHistoryPrimaryKeyColumns)
	claimHistoryInsertCacheMut       sync.RWMutex
	claimHistoryInsertCache          = make(map[string]insertCache)
	claimHistoryUpdateCacheMut       sync.RWMutex
	claimHistoryUpdateCache          = make(map[string]updateCache)
	claimHistoryUpsertCacheMut       sync.RWMutex
	claimHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single claimHistory record from the query.
func (q claimHistoryQuery) One(exec boil.Executor) (*ClaimHistory, error) {
	o := &ClaimHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for claim_histories")
	}

	return o, nil
}

// All returns all ClaimHistory records from the query.
func (q claimHistoryQuery) All(exec boil.Executor) (ClaimHistorySlice, error) {
	var o []*ClaimHistory

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ClaimHistory slice")
	}

	return o, nil
}

// Count returns the count of all ClaimHistory records in the query.
func (q claimHistoryQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count claim_histories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q claimHistoryQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if claim_histories exists")
	}

	return count > 0, nil
}

// Claim pointed to by the foreign key.
func (o *ClaimHistory) Claim(mods ...qm.QueryMod) claimQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ClaimID),
	}

	queryMods = append(queryMods, mods...)

	query := Claims(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[claims]")

	return query
}

// Profile pointed to by the foreign key.
func (o *ClaimHistory) Profile(mods ...qm.QueryMod) profileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ProfileID),
	}

	queryMods = append(queryMods, mods...)

	query := Profiles(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[profiles]")

	return query
}

// Trade pointed to by the foreign key.
func (o *ClaimHistory) Trade(mods ...qm.QueryMod) tradeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TradeID),
	}

	queryMods = append(queryMods, mods...)

	query := Trades(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[trades]")

	return query
}

// LoadClaim allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (claimHistoryL) LoadClaim(e boil.Executor, singular bool, maybeClaimHistory interface{}, mods queries.Applicator) error {
	var slice []*ClaimHistory
	var object *ClaimHistory

	if singular {
		object = maybeClaimHistory.(*ClaimHistory)
	} else {
		slice = *maybeClaimHistory.(*[]*ClaimHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &claimHistoryR{}
		}
		args = append(args, object.ClaimID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &claimHistoryR{}
			}

			for _, a := range args {
				if a == obj.ClaimID {
					continue Outer
				}
			}

			args = append(args, obj.ClaimID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.claims`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Claim")
	}

	var resultSlice []*Claim
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Claim")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for claims")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for claims")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Claim = foreign
		if foreign.R == nil {
			foreign.R = &claimR{}
		}
		foreign.R.ClaimHistories = append(foreign.R.ClaimHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ClaimID == foreign.ID {
				local.R.Claim = foreign
				if foreign.R == nil {
					foreign.R = &claimR{}
				}
				foreign.R.ClaimHistories = append(foreign.R.ClaimHistories, local)
				break
			}
		}
	}

	return nil
}

// LoadProfile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (claimHistoryL) LoadProfile(e boil.Executor, singular bool, maybeClaimHistory interface{}, mods queries.Applicator) error {
	var slice []*ClaimHistory
	var object *ClaimHistory

	if singular {
		object = maybeClaimHistory.(*ClaimHistory)
	} else {
		slice = *maybeClaimHistory.(*[]*ClaimHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &claimHistoryR{}
		}
		args = append(args, object.ProfileID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &claimHistoryR{}
			}

			for _, a := range args {
				if a == obj.ProfileID {
					continue Outer
				}
			}

			args = append(args, obj.ProfileID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.profiles`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Profile")
	}

	var resultSlice []*Profile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Profile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for profiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profiles")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Profile = foreign
		if foreign.R == nil {
			foreign.R = &profileR{}
		}
		foreign.R.ClaimHistories = append(foreign.R.ClaimHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProfileID == foreign.ID {
				local.R.Profile = foreign
				if foreign.R == nil {
					foreign.R = &profileR{}
				}
				foreign.R.ClaimHistories = append(foreign.R.ClaimHistories, local)
				break
			}
		}
	}

	return nil
}

// LoadTrade allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (claimHistoryL) LoadTrade(e boil.Executor, singular bool, maybeClaimHistory interface{}, mods queries.Applicator) error {
	var slice []*ClaimHistory
	var object *ClaimHistory

	if singular {
		object = maybeClaimHistory.(*ClaimHistory)
	} else {
		slice = *maybeClaimHistory.(*[]*ClaimHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &claimHistoryR{}
		}
		args = append(args, object.TradeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &claimHistoryR{}
			}

			for _, a := range args {
				if a == obj.TradeID {
					continue Outer
				}
			}

			args = append(args, obj.TradeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.trades`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Trade")
	}

	var resultSlice []*Trade
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Trade")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for trades")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trades")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Trade = foreign
		if foreign.R == nil {
			foreign.R = &tradeR{}
		}
		foreign.R.ClaimHistories = append(foreign.R.ClaimHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TradeID == foreign.ID {
				local.R.Trade = foreign
				if foreign.R == nil {
					foreign.R = &tradeR{}
				}
				foreign.R.ClaimHistories = append(foreign.R.ClaimHistories, local)
				break
			}
		}
	}

	return nil
}

// SetClaim of the claimHistory to the related item.
// Sets o.R.Claim to related.
// Adds o to related.R.ClaimHistories.
func (o *ClaimHistory) SetClaim(exec boil.Executor, insert bool, related *Claim) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[claim_histories] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"claim_id"}),
		strmangle.WhereClause("[", "]", 2, claimHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ClaimID = related.ID
	if o.R == nil {
		o.R = &claimHistoryR{
			Claim: related,
		}
	} else {
		o.R.Claim = related
	}

	if related.R == nil {
		related.R = &claimR{
			ClaimHistories: ClaimHistorySlice{o},
		}
	} else {
		related.R.ClaimHistories = append(related.R.ClaimHistories, o)
	}

	return nil
}

// SetProfile of the claimHistory to the related item.
// Sets o.R.Profile to related.
// Adds o to related.R.ClaimHistories.
func (o *ClaimHistory) SetProfile(exec boil.Executor, insert bool, related *Profile) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[claim_histories] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"profile_id"}),
		strmangle.WhereClause("[", "]", 2, claimHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProfileID = related.ID
	if o.R == nil {
		o.R = &claimHistoryR{
			Profile: related,
		}
	} else {
		o.R.Profile = related
	}

	if related.R == nil {
		related.R = &profileR{
			ClaimHistories: ClaimHistorySlice{o},
		}
	} else {
		related.R.ClaimHistories = append(related.R.ClaimHistories, o)
	}

	return nil
}

// SetTrade of the claimHistory to the related item.
// Sets o.R.Trade to related.
// Adds o to related.R.ClaimHistories.
func (o *ClaimHistory) SetTrade(exec boil.Executor, insert bool, related *Trade) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[claim_histories] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"trade_id"}),
		strmangle.WhereClause("[", "]", 2, claimHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TradeID = related.ID
	if o.R == nil {
		o.R = &claimHistoryR{
			Trade: related,
		}
	} else {
		o.R.Trade = related
	}

	if related.R == nil {
		related.R = &tradeR{
			ClaimHistories: ClaimHistorySlice{o},
		}
	} else {
		related.R.ClaimHistories = append(related.R.ClaimHistories, o)
	}

	return nil
}

// ClaimHistories retrieves all the records using an executor.
func ClaimHistories(mods ...qm.QueryMod) claimHistoryQuery {
	mods = append(mods, qm.From("[dbo].[claim_histories]"))
	return claimHistoryQuery{NewQuery(mods...)}
}

// FindClaimHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClaimHistory(exec boil.Executor, iD int, selectCols ...string) (*ClaimHistory, error) {
	claimHistoryObj := &ClaimHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[claim_histories] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, claimHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from claim_histories")
	}

	return claimHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClaimHistory) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no claim_histories provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(claimHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	claimHistoryInsertCacheMut.RLock()
	cache, cached := claimHistoryInsertCache[key]
	claimHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			claimHistoryAllColumns,
			claimHistoryColumnsWithDefault,
			claimHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(claimHistoryType, claimHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(claimHistoryType, claimHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[claim_histories] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[claim_histories] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into claim_histories")
	}

	if !cached {
		claimHistoryInsertCacheMut.Lock()
		claimHistoryInsertCache[key] = cache
		claimHistoryInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ClaimHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClaimHistory) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	claimHistoryUpdateCacheMut.RLock()
	cache, cached := claimHistoryUpdateCache[key]
	claimHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			claimHistoryAllColumns,
			claimHistoryPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, claimHistoryColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update claim_histories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[claim_histories] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, claimHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(claimHistoryType, claimHistoryMapping, append(wl, claimHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update claim_histories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for claim_histories")
	}

	if !cached {
		claimHistoryUpdateCacheMut.Lock()
		claimHistoryUpdateCache[key] = cache
		claimHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q claimHistoryQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for claim_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for claim_histories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClaimHistorySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[claim_histories] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, claimHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in claimHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all claimHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ClaimHistory) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no claim_histories provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(claimHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	claimHistoryUpsertCacheMut.RLock()
	cache, cached := claimHistoryUpsertCache[key]
	claimHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			claimHistoryAllColumns,
			claimHistoryColumnsWithDefault,
			claimHistoryColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, claimHistoryColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(claimHistoryPrimaryKeyColumns, v) && strmangle.ContainsAny(claimHistoryColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert claim_histories, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, claimHistoryColumnsWithAuto)
		ret = strmangle.SetMerge(ret, claimHistoryColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			claimHistoryAllColumns,
			claimHistoryPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, claimHistoryColumnsWithAuto)

		if len(update) == 0 {
			return errors.New("models: unable to upsert claim_histories, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "claim_histories", claimHistoryPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(claimHistoryPrimaryKeyColumns))
		copy(whitelist, claimHistoryPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(claimHistoryType, claimHistoryMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(claimHistoryType, claimHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert claim_histories")
	}

	if !cached {
		claimHistoryUpsertCacheMut.Lock()
		claimHistoryUpsertCache[key] = cache
		claimHistoryUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ClaimHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClaimHistory) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ClaimHistory provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), claimHistoryPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[claim_histories] WHERE [id]=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from claim_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for claim_histories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q claimHistoryQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no claimHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from claim_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for claim_histories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClaimHistorySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[claim_histories] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, claimHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from claimHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for claim_histories")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClaimHistory) Reload(exec boil.Executor) error {
	ret, err := FindClaimHistory(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClaimHistorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClaimHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[claim_histories].* FROM [dbo].[claim_histories] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, claimHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ClaimHistorySlice")
	}

	*o = slice

	return nil
}

// ClaimHistoryExists checks if the ClaimHistory row exists.
func ClaimHistoryExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[claim_histories] where [id]=$1) then 1 else 0 end"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if claim_histories exists")
	}

	return exists, nil
}
