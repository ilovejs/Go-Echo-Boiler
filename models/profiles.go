// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Profile is an object representing the database table.
type Profile struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ImageURL  null.String `boil:"image_url" json:"image_url,omitempty" toml:"image_url" yaml:"image_url,omitempty"`
	Mobile    null.String `boil:"mobile" json:"mobile,omitempty" toml:"mobile" yaml:"mobile,omitempty"`
	Company   null.String `boil:"company" json:"company,omitempty" toml:"company" yaml:"company,omitempty"`
	FirstName null.String `boil:"first_name" json:"first_name,omitempty" toml:"first_name" yaml:"first_name,omitempty"`
	LastName  null.String `boil:"last_name" json:"last_name,omitempty" toml:"last_name" yaml:"last_name,omitempty"`
	IsActive  null.Bool   `boil:"is_active" json:"is_active,omitempty" toml:"is_active" yaml:"is_active,omitempty"`
	IsDeleted null.Bool   `boil:"is_deleted" json:"is_deleted,omitempty" toml:"is_deleted" yaml:"is_deleted,omitempty"`
	Created   null.Time   `boil:"created" json:"created,omitempty" toml:"created" yaml:"created,omitempty"`
	Updated   null.Time   `boil:"updated" json:"updated,omitempty" toml:"updated" yaml:"updated,omitempty"`

	R *profileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L profileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProfileColumns = struct {
	ID        string
	UserID    string
	ImageURL  string
	Mobile    string
	Company   string
	FirstName string
	LastName  string
	IsActive  string
	IsDeleted string
	Created   string
	Updated   string
}{
	ID:        "id",
	UserID:    "user_id",
	ImageURL:  "image_url",
	Mobile:    "mobile",
	Company:   "company",
	FirstName: "first_name",
	LastName:  "last_name",
	IsActive:  "is_active",
	IsDeleted: "is_deleted",
	Created:   "created",
	Updated:   "updated",
}

// Generated where

var ProfileWhere = struct {
	ID        whereHelperint
	UserID    whereHelperint
	ImageURL  whereHelpernull_String
	Mobile    whereHelpernull_String
	Company   whereHelpernull_String
	FirstName whereHelpernull_String
	LastName  whereHelpernull_String
	IsActive  whereHelpernull_Bool
	IsDeleted whereHelpernull_Bool
	Created   whereHelpernull_Time
	Updated   whereHelpernull_Time
}{
	ID:        whereHelperint{field: "[dbo].[profiles].[id]"},
	UserID:    whereHelperint{field: "[dbo].[profiles].[user_id]"},
	ImageURL:  whereHelpernull_String{field: "[dbo].[profiles].[image_url]"},
	Mobile:    whereHelpernull_String{field: "[dbo].[profiles].[mobile]"},
	Company:   whereHelpernull_String{field: "[dbo].[profiles].[company]"},
	FirstName: whereHelpernull_String{field: "[dbo].[profiles].[first_name]"},
	LastName:  whereHelpernull_String{field: "[dbo].[profiles].[last_name]"},
	IsActive:  whereHelpernull_Bool{field: "[dbo].[profiles].[is_active]"},
	IsDeleted: whereHelpernull_Bool{field: "[dbo].[profiles].[is_deleted]"},
	Created:   whereHelpernull_Time{field: "[dbo].[profiles].[created]"},
	Updated:   whereHelpernull_Time{field: "[dbo].[profiles].[updated]"},
}

// ProfileRels is where relationship names are stored.
var ProfileRels = struct {
	User                   string
	ClaimHistories         string
	Claims                 string
	CreatorProfileProjects string
	ManagerProfileProjects string
	Trades                 string
}{
	User:                   "User",
	ClaimHistories:         "ClaimHistories",
	Claims:                 "Claims",
	CreatorProfileProjects: "CreatorProfileProjects",
	ManagerProfileProjects: "ManagerProfileProjects",
	Trades:                 "Trades",
}

// profileR is where relationships are stored.
type profileR struct {
	User                   *User
	ClaimHistories         ClaimHistorySlice
	Claims                 ClaimSlice
	CreatorProfileProjects ProjectSlice
	ManagerProfileProjects ProjectSlice
	Trades                 TradeSlice
}

// NewStruct creates a new relationship struct
func (*profileR) NewStruct() *profileR {
	return &profileR{}
}

// profileL is where Load methods for each relationship are stored.
type profileL struct{}

var (
	profileAllColumns            = []string{"id", "user_id", "image_url", "mobile", "company", "first_name", "last_name", "is_active", "is_deleted", "created", "updated"}
	profileColumnsWithAuto       = []string{}
	profileColumnsWithoutDefault = []string{"user_id", "image_url", "mobile", "company", "first_name", "last_name", "is_active", "is_deleted", "created"}
	profileColumnsWithDefault    = []string{"id", "updated"}
	profilePrimaryKeyColumns     = []string{"id"}
)

type (
	// ProfileSlice is an alias for a slice of pointers to Profile.
	// This should generally be used opposed to []Profile.
	ProfileSlice []*Profile

	profileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	profileType                 = reflect.TypeOf(&Profile{})
	profileMapping              = queries.MakeStructMapping(profileType)
	profilePrimaryKeyMapping, _ = queries.BindMapping(profileType, profileMapping, profilePrimaryKeyColumns)
	profileInsertCacheMut       sync.RWMutex
	profileInsertCache          = make(map[string]insertCache)
	profileUpdateCacheMut       sync.RWMutex
	profileUpdateCache          = make(map[string]updateCache)
	profileUpsertCacheMut       sync.RWMutex
	profileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single profile record from the query.
func (q profileQuery) One(exec boil.Executor) (*Profile, error) {
	o := &Profile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for profiles")
	}

	return o, nil
}

// All returns all Profile records from the query.
func (q profileQuery) All(exec boil.Executor) (ProfileSlice, error) {
	var o []*Profile

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Profile slice")
	}

	return o, nil
}

// Count returns the count of all Profile records in the query.
func (q profileQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count profiles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q profileQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if profiles exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Profile) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[users]")

	return query
}

// ClaimHistories retrieves all the claim_history's ClaimHistories with an executor.
func (o *Profile) ClaimHistories(mods ...qm.QueryMod) claimHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[claim_histories].[profile_id]=?", o.ID),
	)

	query := ClaimHistories(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[claim_histories]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[claim_histories].*"})
	}

	return query
}

// Claims retrieves all the claim's Claims with an executor.
func (o *Profile) Claims(mods ...qm.QueryMod) claimQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[claims].[profile_id]=?", o.ID),
	)

	query := Claims(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[claims]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[claims].*"})
	}

	return query
}

// CreatorProfileProjects retrieves all the project's Projects with an executor via creator_profile_id column.
func (o *Profile) CreatorProfileProjects(mods ...qm.QueryMod) projectQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[projects].[creator_profile_id]=?", o.ID),
	)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[projects]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[projects].*"})
	}

	return query
}

// ManagerProfileProjects retrieves all the project's Projects with an executor via manager_profile_id column.
func (o *Profile) ManagerProfileProjects(mods ...qm.QueryMod) projectQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[projects].[manager_profile_id]=?", o.ID),
	)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[projects]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[projects].*"})
	}

	return query
}

// Trades retrieves all the trade's Trades with an executor.
func (o *Profile) Trades(mods ...qm.QueryMod) tradeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[trades].[profile_id]=?", o.ID),
	)

	query := Trades(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[trades]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[trades].*"})
	}

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (profileL) LoadUser(e boil.Executor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		object = maybeProfile.(*Profile)
	} else {
		slice = *maybeProfile.(*[]*Profile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.users`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Profiles = append(foreign.R.Profiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Profiles = append(foreign.R.Profiles, local)
				break
			}
		}
	}

	return nil
}

// LoadClaimHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileL) LoadClaimHistories(e boil.Executor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		object = maybeProfile.(*Profile)
	} else {
		slice = *maybeProfile.(*[]*Profile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.claim_histories`), qm.WhereIn(`profile_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load claim_histories")
	}

	var resultSlice []*ClaimHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice claim_histories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on claim_histories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for claim_histories")
	}

	if singular {
		object.R.ClaimHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &claimHistoryR{}
			}
			foreign.R.Profile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProfileID {
				local.R.ClaimHistories = append(local.R.ClaimHistories, foreign)
				if foreign.R == nil {
					foreign.R = &claimHistoryR{}
				}
				foreign.R.Profile = local
				break
			}
		}
	}

	return nil
}

// LoadClaims allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileL) LoadClaims(e boil.Executor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		object = maybeProfile.(*Profile)
	} else {
		slice = *maybeProfile.(*[]*Profile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.claims`), qm.WhereIn(`profile_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load claims")
	}

	var resultSlice []*Claim
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice claims")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on claims")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for claims")
	}

	if singular {
		object.R.Claims = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &claimR{}
			}
			foreign.R.Profile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProfileID {
				local.R.Claims = append(local.R.Claims, foreign)
				if foreign.R == nil {
					foreign.R = &claimR{}
				}
				foreign.R.Profile = local
				break
			}
		}
	}

	return nil
}

// LoadCreatorProfileProjects allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileL) LoadCreatorProfileProjects(e boil.Executor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		object = maybeProfile.(*Profile)
	} else {
		slice = *maybeProfile.(*[]*Profile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.projects`), qm.WhereIn(`creator_profile_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load projects")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice projects")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if singular {
		object.R.CreatorProfileProjects = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &projectR{}
			}
			foreign.R.CreatorProfile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatorProfileID {
				local.R.CreatorProfileProjects = append(local.R.CreatorProfileProjects, foreign)
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.CreatorProfile = local
				break
			}
		}
	}

	return nil
}

// LoadManagerProfileProjects allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileL) LoadManagerProfileProjects(e boil.Executor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		object = maybeProfile.(*Profile)
	} else {
		slice = *maybeProfile.(*[]*Profile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.projects`), qm.WhereIn(`manager_profile_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load projects")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice projects")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if singular {
		object.R.ManagerProfileProjects = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &projectR{}
			}
			foreign.R.ManagerProfile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ManagerProfileID {
				local.R.ManagerProfileProjects = append(local.R.ManagerProfileProjects, foreign)
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.ManagerProfile = local
				break
			}
		}
	}

	return nil
}

// LoadTrades allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileL) LoadTrades(e boil.Executor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		object = maybeProfile.(*Profile)
	} else {
		slice = *maybeProfile.(*[]*Profile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.trades`), qm.WhereIn(`profile_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load trades")
	}

	var resultSlice []*Trade
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice trades")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on trades")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trades")
	}

	if singular {
		object.R.Trades = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tradeR{}
			}
			foreign.R.Profile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProfileID {
				local.R.Trades = append(local.R.Trades, foreign)
				if foreign.R == nil {
					foreign.R = &tradeR{}
				}
				foreign.R.Profile = local
				break
			}
		}
	}

	return nil
}

// SetUser of the profile to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Profiles.
func (o *Profile) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[profiles] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"user_id"}),
		strmangle.WhereClause("[", "]", 2, profilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &profileR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Profiles: ProfileSlice{o},
		}
	} else {
		related.R.Profiles = append(related.R.Profiles, o)
	}

	return nil
}

// AddClaimHistories adds the given related objects to the existing relationships
// of the profile, optionally inserting them as new records.
// Appends related to o.R.ClaimHistories.
// Sets related.R.Profile appropriately.
func (o *Profile) AddClaimHistories(exec boil.Executor, insert bool, related ...*ClaimHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProfileID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[claim_histories] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"profile_id"}),
				strmangle.WhereClause("[", "]", 2, claimHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProfileID = o.ID
		}
	}

	if o.R == nil {
		o.R = &profileR{
			ClaimHistories: related,
		}
	} else {
		o.R.ClaimHistories = append(o.R.ClaimHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &claimHistoryR{
				Profile: o,
			}
		} else {
			rel.R.Profile = o
		}
	}
	return nil
}

// AddClaims adds the given related objects to the existing relationships
// of the profile, optionally inserting them as new records.
// Appends related to o.R.Claims.
// Sets related.R.Profile appropriately.
func (o *Profile) AddClaims(exec boil.Executor, insert bool, related ...*Claim) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProfileID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[claims] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"profile_id"}),
				strmangle.WhereClause("[", "]", 2, claimPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProfileID = o.ID
		}
	}

	if o.R == nil {
		o.R = &profileR{
			Claims: related,
		}
	} else {
		o.R.Claims = append(o.R.Claims, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &claimR{
				Profile: o,
			}
		} else {
			rel.R.Profile = o
		}
	}
	return nil
}

// AddCreatorProfileProjects adds the given related objects to the existing relationships
// of the profile, optionally inserting them as new records.
// Appends related to o.R.CreatorProfileProjects.
// Sets related.R.CreatorProfile appropriately.
func (o *Profile) AddCreatorProfileProjects(exec boil.Executor, insert bool, related ...*Project) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatorProfileID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[projects] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"creator_profile_id"}),
				strmangle.WhereClause("[", "]", 2, projectPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatorProfileID = o.ID
		}
	}

	if o.R == nil {
		o.R = &profileR{
			CreatorProfileProjects: related,
		}
	} else {
		o.R.CreatorProfileProjects = append(o.R.CreatorProfileProjects, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &projectR{
				CreatorProfile: o,
			}
		} else {
			rel.R.CreatorProfile = o
		}
	}
	return nil
}

// AddManagerProfileProjects adds the given related objects to the existing relationships
// of the profile, optionally inserting them as new records.
// Appends related to o.R.ManagerProfileProjects.
// Sets related.R.ManagerProfile appropriately.
func (o *Profile) AddManagerProfileProjects(exec boil.Executor, insert bool, related ...*Project) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ManagerProfileID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[projects] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"manager_profile_id"}),
				strmangle.WhereClause("[", "]", 2, projectPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ManagerProfileID = o.ID
		}
	}

	if o.R == nil {
		o.R = &profileR{
			ManagerProfileProjects: related,
		}
	} else {
		o.R.ManagerProfileProjects = append(o.R.ManagerProfileProjects, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &projectR{
				ManagerProfile: o,
			}
		} else {
			rel.R.ManagerProfile = o
		}
	}
	return nil
}

// AddTrades adds the given related objects to the existing relationships
// of the profile, optionally inserting them as new records.
// Appends related to o.R.Trades.
// Sets related.R.Profile appropriately.
func (o *Profile) AddTrades(exec boil.Executor, insert bool, related ...*Trade) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProfileID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[trades] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"profile_id"}),
				strmangle.WhereClause("[", "]", 2, tradePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProfileID = o.ID
		}
	}

	if o.R == nil {
		o.R = &profileR{
			Trades: related,
		}
	} else {
		o.R.Trades = append(o.R.Trades, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tradeR{
				Profile: o,
			}
		} else {
			rel.R.Profile = o
		}
	}
	return nil
}

// Profiles retrieves all the records using an executor.
func Profiles(mods ...qm.QueryMod) profileQuery {
	mods = append(mods, qm.From("[dbo].[profiles]"))
	return profileQuery{NewQuery(mods...)}
}

// FindProfile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProfile(exec boil.Executor, iD int, selectCols ...string) (*Profile, error) {
	profileObj := &Profile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[profiles] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, profileObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from profiles")
	}

	return profileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Profile) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no profiles provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(profileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	profileInsertCacheMut.RLock()
	cache, cached := profileInsertCache[key]
	profileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			profileAllColumns,
			profileColumnsWithDefault,
			profileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(profileType, profileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(profileType, profileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[profiles] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[profiles] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into profiles")
	}

	if !cached {
		profileInsertCacheMut.Lock()
		profileInsertCache[key] = cache
		profileInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Profile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Profile) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	profileUpdateCacheMut.RLock()
	cache, cached := profileUpdateCache[key]
	profileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			profileAllColumns,
			profilePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, profileColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update profiles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[profiles] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, profilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(profileType, profileMapping, append(wl, profilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update profiles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for profiles")
	}

	if !cached {
		profileUpdateCacheMut.Lock()
		profileUpdateCache[key] = cache
		profileUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q profileQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for profiles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for profiles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProfileSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[profiles] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, profilePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in profile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all profile")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Profile) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no profiles provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(profileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	profileUpsertCacheMut.RLock()
	cache, cached := profileUpsertCache[key]
	profileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			profileAllColumns,
			profileColumnsWithDefault,
			profileColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, profileColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(profilePrimaryKeyColumns, v) && strmangle.ContainsAny(profileColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert profiles, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, profileColumnsWithAuto)
		ret = strmangle.SetMerge(ret, profileColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			profileAllColumns,
			profilePrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, profileColumnsWithAuto)

		if len(update) == 0 {
			return errors.New("models: unable to upsert profiles, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "profiles", profilePrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(profilePrimaryKeyColumns))
		copy(whitelist, profilePrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(profileType, profileMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(profileType, profileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert profiles")
	}

	if !cached {
		profileUpsertCacheMut.Lock()
		profileUpsertCache[key] = cache
		profileUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Profile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Profile) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Profile provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), profilePrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[profiles] WHERE [id]=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from profiles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for profiles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q profileQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no profileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from profiles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for profiles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProfileSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[profiles] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, profilePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from profile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for profiles")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Profile) Reload(exec boil.Executor) error {
	ret, err := FindProfile(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProfileSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProfileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[profiles].* FROM [dbo].[profiles] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, profilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProfileSlice")
	}

	*o = slice

	return nil
}

// ProfileExists checks if the Profile row exists.
func ProfileExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[profiles] where [id]=$1) then 1 else 0 end"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if profiles exists")
	}

	return exists, nil
}
