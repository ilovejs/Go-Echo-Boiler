// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"github.com/volatiletech/sqlboiler/types"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TradeItem is an object representing the database table.
type TradeItem struct {
	ID            int64             `boil:"id" json:"id" toml:"id" yaml:"id"`
	TradeID       int               `boil:"trade_id" json:"trade_id" toml:"trade_id" yaml:"trade_id"`
	FloorLevel    string            `boil:"floor_level" json:"floor_level" toml:"floor_level" yaml:"floor_level"`
	WorkDesc      null.String       `boil:"work_desc" json:"work_desc,omitempty" toml:"work_desc" yaml:"work_desc,omitempty"`
	ItemBreakdown types.NullDecimal `boil:"item_breakdown" json:"item_breakdown,omitempty" toml:"item_breakdown" yaml:"item_breakdown,omitempty"`
	IsDeleted     null.Bool         `boil:"is_deleted" json:"is_deleted,omitempty" toml:"is_deleted" yaml:"is_deleted,omitempty"`
	Created       null.Time         `boil:"created" json:"created,omitempty" toml:"created" yaml:"created,omitempty"`
	Updated       null.Time         `boil:"updated" json:"updated,omitempty" toml:"updated" yaml:"updated,omitempty"`
	LoginID       int64             `boil:"login_id" json:"login_id" toml:"login_id" yaml:"login_id"`
	ProjectID     int64             `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	Tempcheck     null.Bool         `boil:"tempcheck" json:"tempcheck,omitempty" toml:"tempcheck" yaml:"tempcheck,omitempty"`

	R *tradeItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tradeItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TradeItemColumns = struct {
	ID            string
	TradeID       string
	FloorLevel    string
	WorkDesc      string
	ItemBreakdown string
	IsDeleted     string
	Created       string
	Updated       string
	LoginID       string
	ProjectID     string
	Tempcheck     string
}{
	ID:            "id",
	TradeID:       "trade_id",
	FloorLevel:    "floor_level",
	WorkDesc:      "work_desc",
	ItemBreakdown: "item_breakdown",
	IsDeleted:     "is_deleted",
	Created:       "created",
	Updated:       "updated",
	LoginID:       "login_id",
	ProjectID:     "project_id",
	Tempcheck:     "tempcheck",
}

// Generated where

var TradeItemWhere = struct {
	ID            whereHelperint64
	TradeID       whereHelperint
	FloorLevel    whereHelperstring
	WorkDesc      whereHelpernull_String
	ItemBreakdown whereHelpertypes_NullDecimal
	IsDeleted     whereHelpernull_Bool
	Created       whereHelpernull_Time
	Updated       whereHelpernull_Time
	LoginID       whereHelperint64
	ProjectID     whereHelperint64
	Tempcheck     whereHelpernull_Bool
}{
	ID:            whereHelperint64{field: "[dbo].[trade_items].[id]"},
	TradeID:       whereHelperint{field: "[dbo].[trade_items].[trade_id]"},
	FloorLevel:    whereHelperstring{field: "[dbo].[trade_items].[floor_level]"},
	WorkDesc:      whereHelpernull_String{field: "[dbo].[trade_items].[work_desc]"},
	ItemBreakdown: whereHelpertypes_NullDecimal{field: "[dbo].[trade_items].[item_breakdown]"},
	IsDeleted:     whereHelpernull_Bool{field: "[dbo].[trade_items].[is_deleted]"},
	Created:       whereHelpernull_Time{field: "[dbo].[trade_items].[created]"},
	Updated:       whereHelpernull_Time{field: "[dbo].[trade_items].[updated]"},
	LoginID:       whereHelperint64{field: "[dbo].[trade_items].[login_id]"},
	ProjectID:     whereHelperint64{field: "[dbo].[trade_items].[project_id]"},
	Tempcheck:     whereHelpernull_Bool{field: "[dbo].[trade_items].[tempcheck]"},
}

// TradeItemRels is where relationship names are stored.
var TradeItemRels = struct {
	Login          string
	Project        string
	Trade          string
	ClaimHistories string
	Claims         string
}{
	Login:          "Login",
	Project:        "Project",
	Trade:          "Trade",
	ClaimHistories: "ClaimHistories",
	Claims:         "Claims",
}

// tradeItemR is where relationships are stored.
type tradeItemR struct {
	Login          *Profile
	Project        *Project
	Trade          *BasicTradeitem
	ClaimHistories ClaimHistorySlice
	Claims         ClaimSlice
}

// NewStruct creates a new relationship struct
func (*tradeItemR) NewStruct() *tradeItemR {
	return &tradeItemR{}
}

// tradeItemL is where Load methods for each relationship are stored.
type tradeItemL struct{}

var (
	tradeItemAllColumns            = []string{"id", "trade_id", "floor_level", "work_desc", "item_breakdown", "is_deleted", "created", "updated", "login_id", "project_id", "tempcheck"}
	tradeItemColumnsWithAuto       = []string{}
	tradeItemColumnsWithoutDefault = []string{"trade_id", "floor_level", "work_desc", "item_breakdown", "is_deleted", "created", "updated", "login_id", "project_id", "tempcheck"}
	tradeItemColumnsWithDefault    = []string{"id"}
	tradeItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// TradeItemSlice is an alias for a slice of pointers to TradeItem.
	// This should generally be used opposed to []TradeItem.
	TradeItemSlice []*TradeItem

	tradeItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tradeItemType                 = reflect.TypeOf(&TradeItem{})
	tradeItemMapping              = queries.MakeStructMapping(tradeItemType)
	tradeItemPrimaryKeyMapping, _ = queries.BindMapping(tradeItemType, tradeItemMapping, tradeItemPrimaryKeyColumns)
	tradeItemInsertCacheMut       sync.RWMutex
	tradeItemInsertCache          = make(map[string]insertCache)
	tradeItemUpdateCacheMut       sync.RWMutex
	tradeItemUpdateCache          = make(map[string]updateCache)
	tradeItemUpsertCacheMut       sync.RWMutex
	tradeItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single tradeItem record from the query.
func (q tradeItemQuery) One(exec boil.Executor) (*TradeItem, error) {
	o := &TradeItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for trade_items")
	}

	return o, nil
}

// All returns all TradeItem records from the query.
func (q tradeItemQuery) All(exec boil.Executor) (TradeItemSlice, error) {
	var o []*TradeItem

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TradeItem slice")
	}

	return o, nil
}

// Count returns the count of all TradeItem records in the query.
func (q tradeItemQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count trade_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tradeItemQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if trade_items exists")
	}

	return count > 0, nil
}

// Login pointed to by the foreign key.
func (o *TradeItem) Login(mods ...qm.QueryMod) profileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.LoginID),
	}

	queryMods = append(queryMods, mods...)

	query := Profiles(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[profiles]")

	return query
}

// Project pointed to by the foreign key.
func (o *TradeItem) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[projects]")

	return query
}

// Trade pointed to by the foreign key.
func (o *TradeItem) Trade(mods ...qm.QueryMod) basicTradeitemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TradeID),
	}

	queryMods = append(queryMods, mods...)

	query := BasicTradeitems(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[basic_tradeitems]")

	return query
}

// ClaimHistories retrieves all the claim_history's ClaimHistories with an executor.
func (o *TradeItem) ClaimHistories(mods ...qm.QueryMod) claimHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[claim_histories].[trade_item_id]=?", o.ID),
	)

	query := ClaimHistories(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[claim_histories]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[claim_histories].*"})
	}

	return query
}

// Claims retrieves all the claim's Claims with an executor.
func (o *TradeItem) Claims(mods ...qm.QueryMod) claimQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[claims].[trade_item_id]=?", o.ID),
	)

	query := Claims(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[claims]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[claims].*"})
	}

	return query
}

// LoadLogin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tradeItemL) LoadLogin(e boil.Executor, singular bool, maybeTradeItem interface{}, mods queries.Applicator) error {
	var slice []*TradeItem
	var object *TradeItem

	if singular {
		object = maybeTradeItem.(*TradeItem)
	} else {
		slice = *maybeTradeItem.(*[]*TradeItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradeItemR{}
		}
		args = append(args, object.LoginID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradeItemR{}
			}

			for _, a := range args {
				if a == obj.LoginID {
					continue Outer
				}
			}

			args = append(args, obj.LoginID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.profiles`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Profile")
	}

	var resultSlice []*Profile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Profile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for profiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profiles")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Login = foreign
		if foreign.R == nil {
			foreign.R = &profileR{}
		}
		foreign.R.LoginTradeItems = append(foreign.R.LoginTradeItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LoginID == foreign.ID {
				local.R.Login = foreign
				if foreign.R == nil {
					foreign.R = &profileR{}
				}
				foreign.R.LoginTradeItems = append(foreign.R.LoginTradeItems, local)
				break
			}
		}
	}

	return nil
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tradeItemL) LoadProject(e boil.Executor, singular bool, maybeTradeItem interface{}, mods queries.Applicator) error {
	var slice []*TradeItem
	var object *TradeItem

	if singular {
		object = maybeTradeItem.(*TradeItem)
	} else {
		slice = *maybeTradeItem.(*[]*TradeItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradeItemR{}
		}
		args = append(args, object.ProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradeItemR{}
			}

			for _, a := range args {
				if a == obj.ProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.projects`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.TradeItems = append(foreign.R.TradeItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectID == foreign.ID {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.TradeItems = append(foreign.R.TradeItems, local)
				break
			}
		}
	}

	return nil
}

// LoadTrade allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tradeItemL) LoadTrade(e boil.Executor, singular bool, maybeTradeItem interface{}, mods queries.Applicator) error {
	var slice []*TradeItem
	var object *TradeItem

	if singular {
		object = maybeTradeItem.(*TradeItem)
	} else {
		slice = *maybeTradeItem.(*[]*TradeItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradeItemR{}
		}
		args = append(args, object.TradeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradeItemR{}
			}

			for _, a := range args {
				if a == obj.TradeID {
					continue Outer
				}
			}

			args = append(args, obj.TradeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.basic_tradeitems`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BasicTradeitem")
	}

	var resultSlice []*BasicTradeitem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BasicTradeitem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for basic_tradeitems")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for basic_tradeitems")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Trade = foreign
		if foreign.R == nil {
			foreign.R = &basicTradeitemR{}
		}
		foreign.R.TradeTradeItems = append(foreign.R.TradeTradeItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TradeID == foreign.ID {
				local.R.Trade = foreign
				if foreign.R == nil {
					foreign.R = &basicTradeitemR{}
				}
				foreign.R.TradeTradeItems = append(foreign.R.TradeTradeItems, local)
				break
			}
		}
	}

	return nil
}

// LoadClaimHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tradeItemL) LoadClaimHistories(e boil.Executor, singular bool, maybeTradeItem interface{}, mods queries.Applicator) error {
	var slice []*TradeItem
	var object *TradeItem

	if singular {
		object = maybeTradeItem.(*TradeItem)
	} else {
		slice = *maybeTradeItem.(*[]*TradeItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradeItemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradeItemR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.claim_histories`), qm.WhereIn(`trade_item_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load claim_histories")
	}

	var resultSlice []*ClaimHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice claim_histories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on claim_histories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for claim_histories")
	}

	if singular {
		object.R.ClaimHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &claimHistoryR{}
			}
			foreign.R.TradeItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TradeItemID {
				local.R.ClaimHistories = append(local.R.ClaimHistories, foreign)
				if foreign.R == nil {
					foreign.R = &claimHistoryR{}
				}
				foreign.R.TradeItem = local
				break
			}
		}
	}

	return nil
}

// LoadClaims allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tradeItemL) LoadClaims(e boil.Executor, singular bool, maybeTradeItem interface{}, mods queries.Applicator) error {
	var slice []*TradeItem
	var object *TradeItem

	if singular {
		object = maybeTradeItem.(*TradeItem)
	} else {
		slice = *maybeTradeItem.(*[]*TradeItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradeItemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradeItemR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dbo.claims`), qm.WhereIn(`trade_item_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load claims")
	}

	var resultSlice []*Claim
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice claims")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on claims")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for claims")
	}

	if singular {
		object.R.Claims = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &claimR{}
			}
			foreign.R.TradeItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TradeItemID {
				local.R.Claims = append(local.R.Claims, foreign)
				if foreign.R == nil {
					foreign.R = &claimR{}
				}
				foreign.R.TradeItem = local
				break
			}
		}
	}

	return nil
}

// SetLogin of the tradeItem to the related item.
// Sets o.R.Login to related.
// Adds o to related.R.LoginTradeItems.
func (o *TradeItem) SetLogin(exec boil.Executor, insert bool, related *Profile) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[trade_items] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"login_id"}),
		strmangle.WhereClause("[", "]", 2, tradeItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LoginID = related.ID
	if o.R == nil {
		o.R = &tradeItemR{
			Login: related,
		}
	} else {
		o.R.Login = related
	}

	if related.R == nil {
		related.R = &profileR{
			LoginTradeItems: TradeItemSlice{o},
		}
	} else {
		related.R.LoginTradeItems = append(related.R.LoginTradeItems, o)
	}

	return nil
}

// SetProject of the tradeItem to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.TradeItems.
func (o *TradeItem) SetProject(exec boil.Executor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[trade_items] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"project_id"}),
		strmangle.WhereClause("[", "]", 2, tradeItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectID = related.ID
	if o.R == nil {
		o.R = &tradeItemR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			TradeItems: TradeItemSlice{o},
		}
	} else {
		related.R.TradeItems = append(related.R.TradeItems, o)
	}

	return nil
}

// SetTrade of the tradeItem to the related item.
// Sets o.R.Trade to related.
// Adds o to related.R.TradeTradeItems.
func (o *TradeItem) SetTrade(exec boil.Executor, insert bool, related *BasicTradeitem) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[trade_items] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"trade_id"}),
		strmangle.WhereClause("[", "]", 2, tradeItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TradeID = related.ID
	if o.R == nil {
		o.R = &tradeItemR{
			Trade: related,
		}
	} else {
		o.R.Trade = related
	}

	if related.R == nil {
		related.R = &basicTradeitemR{
			TradeTradeItems: TradeItemSlice{o},
		}
	} else {
		related.R.TradeTradeItems = append(related.R.TradeTradeItems, o)
	}

	return nil
}

// AddClaimHistories adds the given related objects to the existing relationships
// of the trade_item, optionally inserting them as new records.
// Appends related to o.R.ClaimHistories.
// Sets related.R.TradeItem appropriately.
func (o *TradeItem) AddClaimHistories(exec boil.Executor, insert bool, related ...*ClaimHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TradeItemID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[claim_histories] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"trade_item_id"}),
				strmangle.WhereClause("[", "]", 2, claimHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TradeItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tradeItemR{
			ClaimHistories: related,
		}
	} else {
		o.R.ClaimHistories = append(o.R.ClaimHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &claimHistoryR{
				TradeItem: o,
			}
		} else {
			rel.R.TradeItem = o
		}
	}
	return nil
}

// AddClaims adds the given related objects to the existing relationships
// of the trade_item, optionally inserting them as new records.
// Appends related to o.R.Claims.
// Sets related.R.TradeItem appropriately.
func (o *TradeItem) AddClaims(exec boil.Executor, insert bool, related ...*Claim) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TradeItemID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[claims] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"trade_item_id"}),
				strmangle.WhereClause("[", "]", 2, claimPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TradeItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tradeItemR{
			Claims: related,
		}
	} else {
		o.R.Claims = append(o.R.Claims, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &claimR{
				TradeItem: o,
			}
		} else {
			rel.R.TradeItem = o
		}
	}
	return nil
}

// TradeItems retrieves all the records using an executor.
func TradeItems(mods ...qm.QueryMod) tradeItemQuery {
	mods = append(mods, qm.From("[dbo].[trade_items]"))
	return tradeItemQuery{NewQuery(mods...)}
}

// FindTradeItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTradeItem(exec boil.Executor, iD int64, selectCols ...string) (*TradeItem, error) {
	tradeItemObj := &TradeItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[trade_items] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, tradeItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from trade_items")
	}

	return tradeItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TradeItem) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trade_items provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(tradeItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tradeItemInsertCacheMut.RLock()
	cache, cached := tradeItemInsertCache[key]
	tradeItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tradeItemAllColumns,
			tradeItemColumnsWithDefault,
			tradeItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tradeItemType, tradeItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tradeItemType, tradeItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[trade_items] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[trade_items] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into trade_items")
	}

	if !cached {
		tradeItemInsertCacheMut.Lock()
		tradeItemInsertCache[key] = cache
		tradeItemInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TradeItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TradeItem) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	tradeItemUpdateCacheMut.RLock()
	cache, cached := tradeItemUpdateCache[key]
	tradeItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tradeItemAllColumns,
			tradeItemPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, tradeItemColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update trade_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[trade_items] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, tradeItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tradeItemType, tradeItemMapping, append(wl, tradeItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update trade_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for trade_items")
	}

	if !cached {
		tradeItemUpdateCacheMut.Lock()
		tradeItemUpdateCache[key] = cache
		tradeItemUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q tradeItemQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for trade_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for trade_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TradeItemSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradeItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[trade_items] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tradeItemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tradeItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tradeItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TradeItem) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trade_items provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(tradeItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tradeItemUpsertCacheMut.RLock()
	cache, cached := tradeItemUpsertCache[key]
	tradeItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tradeItemAllColumns,
			tradeItemColumnsWithDefault,
			tradeItemColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, tradeItemColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(tradeItemPrimaryKeyColumns, v) && strmangle.ContainsAny(tradeItemColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert trade_items, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, tradeItemColumnsWithAuto)
		ret = strmangle.SetMerge(ret, tradeItemColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			tradeItemAllColumns,
			tradeItemPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, tradeItemColumnsWithAuto)

		if len(update) == 0 {
			return errors.New("models: unable to upsert trade_items, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "trade_items", tradeItemPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(tradeItemPrimaryKeyColumns))
		copy(whitelist, tradeItemPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(tradeItemType, tradeItemMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tradeItemType, tradeItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert trade_items")
	}

	if !cached {
		tradeItemUpsertCacheMut.Lock()
		tradeItemUpsertCache[key] = cache
		tradeItemUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TradeItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TradeItem) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TradeItem provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tradeItemPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[trade_items] WHERE [id]=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from trade_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for trade_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tradeItemQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tradeItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trade_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trade_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TradeItemSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradeItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[trade_items] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tradeItemPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tradeItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trade_items")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TradeItem) Reload(exec boil.Executor) error {
	ret, err := FindTradeItem(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TradeItemSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TradeItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradeItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[trade_items].* FROM [dbo].[trade_items] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tradeItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TradeItemSlice")
	}

	*o = slice

	return nil
}

// TradeItemExists checks if the TradeItem row exists.
func TradeItemExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[trade_items] where [id]=$1) then 1 else 0 end"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if trade_items exists")
	}

	return exists, nil
}
